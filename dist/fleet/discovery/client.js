var DiscoveryClient, DiscoveryMethod, DiscoveryResource, Q, request;

Q = require("q");

request = require("request");

DiscoveryResource = require("./resource");

DiscoveryMethod = require("./method");

DiscoveryClient = (function() {
  DiscoveryClient.prototype.kind = "";

  DiscoveryClient.prototype.discoveryVersion = "";

  DiscoveryClient.prototype.id = "";

  DiscoveryClient.prototype.name = "";

  DiscoveryClient.prototype.version = "";

  DiscoveryClient.prototype.title = "";

  DiscoveryClient.prototype.description = "";

  DiscoveryClient.prototype.documentLink = "";

  DiscoveryClient.prototype.protocol = "";

  DiscoveryClient.prototype.baseUrl = "";

  DiscoveryClient.prototype.basePath = "";

  DiscoveryClient.prototype.rootUrl = "";

  DiscoveryClient.prototype.servicePath = "";

  DiscoveryClient.prototype.batchPath = "";

  DiscoveryClient.prototype.endpoint = "";

  DiscoveryClient.prototype.resources = [];

  DiscoveryClient.prototype.complete = false;

  DiscoveryClient.prototype.error = null;

  DiscoveryClient.prototype.discovering = false;

  DiscoveryClient.prototype.resolveOnDiscovery = [];


  /**
  @param {string} endpoint
   */

  function DiscoveryClient(endpoint, basePath) {
    this.endpoint = endpoint;
    if (!endpoint) {
      throw new Error("Endpoint is required");
    }
    this.basePath = basePath;
    if (this.basePath === null) {
      this.basePath = "/v1-alpha/";
    }
  }

  DiscoveryClient.prototype.doDiscovery = function() {
    var client, deferred;
    deferred = Q.defer();
    if (this.complete) {
      deferred.resolve(this);
      return deferred.promise;
    }
    this.resolveOnDiscovery.push(deferred);
    if (this.discovering) {
      return deferred.promise;
    }
    this.discovering = true;
    client = this;
    request.get("" + this.endpoint + this.basePath + "discovery.json", function(error, response, body) {
      var err, i, jsonBody, rejectWithError, _i, _len, _ref;
      rejectWithError = function(rejectError) {
        var i, _i, _len, _ref;
        client.error = rejectError;
        client.complete = true;
        client.discovering = false;
        _ref = client.resolveOnDiscovery;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          i.reject(rejectError);
        }
        return client.resolveOnDiscovery = [];
      };
      if (response.statusCode !== 200) {
        error = new Error("Failed to get discovery.json");
      }
      if (error) {
        rejectWithError(error);
        return;
      }
      jsonBody = null;
      try {
        jsonBody = JSON.parse(body);
      } catch (_error) {
        rejectWithError(error);
        return;
      }
      if (!jsonBody) {
        rejectWithError(new Error("discovery.json body empty"));
        return;
      }
      try {
        client.resolveDiscovery(jsonBody);
      } catch (_error) {
        err = _error;
        rejectWithError(err);
        return;
      }
      client.error = null;
      client.complete = true;
      client.discovering = false;
      _ref = client.resolveOnDiscovery;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.resolve(client);
      }
      return client.resolveOnDiscovery = [];
    });
    return deferred.promise;
  };

  DiscoveryClient.prototype.onDiscovery = function() {
    var deferred;
    deferred = Q.defer();
    if (this.complete) {
      if (this.error) {
        deferred.reject(this.error);
      } else {
        deferred.resolve(this);
      }
    } else if (this.discovering) {
      this.resolveOnDiscovery.push(deferred);
    }
    return deferred.promise;
  };

  DiscoveryClient.prototype.resolveDiscovery = function(discovery) {
    var method, methodName, methods, resource, resourceName, resources;
    if (!(discovery instanceof Object)) {
      throw new Error("Discovery not instanceof an object");
    }
    resources = {};
    if (discovery.resources instanceof Object) {
      for (resourceName in discovery.resources) {
        if (!discovery.resources.hasOwnProperty(resourceName)) {
          continue;
        }
        resource = discovery.resources[resourceName];
        if (!(resource.methods instanceof Object)) {
          continue;
        }
        methods = {};
        for (methodName in resource.methods) {
          if (!resource.methods.hasOwnProperty(methodName)) {
            continue;
          }
          method = resource.methods[methodName];
          if (!(method instanceof Object)) {
            continue;
          }
          methods[methodName] = new DiscoveryMethod(method.id, method.description, method.httpMethod, method.path, method.parameters, method.parameterOrder, method.request, method.response);
        }
        resources[resourceName] = new DiscoveryResource(resourceName, methods);
      }
    }
    this.resources = resources;
    return resources;
  };

  return DiscoveryClient;

})();

module.exports = {

  /**
  @param {string} endpoint
   */
  getClient: function(endpoint) {
    return new DiscoveryClient(endpoint);
  }
};

//# sourceMappingURL=data:application/json;base64,