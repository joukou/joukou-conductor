var DiscoveryClient, DiscoveryMethod, DiscoveryResource, Q, request, _;

Q = require("q");

request = require("request");

DiscoveryResource = require("./resource");

DiscoveryMethod = require("./method");

_ = require("lodash");

DiscoveryClient = (function() {
  DiscoveryClient.prototype.kind = "";

  DiscoveryClient.prototype.discoveryVersion = "";

  DiscoveryClient.prototype.id = "";

  DiscoveryClient.prototype.name = "";

  DiscoveryClient.prototype.version = "";

  DiscoveryClient.prototype.title = "";

  DiscoveryClient.prototype.description = "";

  DiscoveryClient.prototype.documentLink = "";

  DiscoveryClient.prototype.protocol = "";

  DiscoveryClient.prototype.baseUrl = "";

  DiscoveryClient.prototype.basePath = "";

  DiscoveryClient.prototype.rootUrl = "";

  DiscoveryClient.prototype.servicePath = "";

  DiscoveryClient.prototype.batchPath = "";

  DiscoveryClient.prototype.endpoint = "";

  DiscoveryClient.prototype.resources = {};

  DiscoveryClient.prototype._complete = false;

  DiscoveryClient.prototype._error = null;

  DiscoveryClient.prototype._discovering = false;

  DiscoveryClient.prototype._resolveOnDiscovery = [];

  DiscoveryClient.prototype._request = request;


  /**
  @param {string} endpoint
   */

  function DiscoveryClient(endpoint, basePath) {
    this.endpoint = endpoint;
    if (!endpoint) {
      throw new Error("Endpoint is required");
    }
    this.basePath = basePath;
    if (this.basePath === null || this.basePath === void 0) {
      this.basePath = "/v1-alpha/";
    }
  }

  DiscoveryClient.prototype.doDiscovery = function() {
    var deferred;
    deferred = Q.defer();
    if (this._complete) {
      if (this._error) {
        deferred.reject(this._error);
      } else {
        deferred.resolve(this);
      }
      return deferred.promise;
    }
    this._resolveOnDiscovery.push(deferred);
    if (this._discovering) {
      return deferred.promise;
    }
    this._discovering = true;
    this._doDiscoveryRequest();
    return deferred.promise;
  };

  DiscoveryClient.prototype._doDiscoveryRequest = function() {
    var client;
    client = this;
    return request.get("" + this.endpoint + this.basePath + "discovery.json", function(error, response, body) {
      return client._onDiscoveryResult(error, response, body);
    });
  };

  DiscoveryClient.prototype._rejectWithError = function(error) {
    var i, _i, _len, _ref;
    this._error = error;
    this._complete = true;
    this._discovering = false;
    _ref = this._resolveOnDiscovery;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.reject(error);
    }
    return this._resolveOnDiscovery = [];
  };

  DiscoveryClient.prototype._resolve = function() {
    var i, _i, _len, _ref;
    this._error = null;
    this._complete = true;
    this._discovering = false;
    _ref = this._resolveOnDiscovery;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.resolve(this);
    }
    return this._resolveOnDiscovery = [];
  };

  DiscoveryClient.prototype._onDiscoveryResult = function(error, response, body) {
    var err, jsonBody;
    if (!error && response.statusCode !== 200) {
      error = new Error("Failed to get discovery.json");
    }
    if (!error && !body) {
      error = new Error("Discovery body is empty");
    }
    if (error) {
      this._rejectWithError(error);
      return;
    }
    jsonBody = null;
    try {
      jsonBody = JSON.parse(body);
    } catch (_error) {
      err = _error;
      this._rejectWithError(err);
      return;
    }
    if (!_.isPlainObject(jsonBody)) {
      this._rejectWithError(new Error("discovery.json body not an object"));
      return;
    }
    try {
      this.resources = this._resolveDiscovery(jsonBody);
    } catch (_error) {
      err = _error;
      this._rejectWithError(err);
      return;
    }
    return this._resolve();
  };

  DiscoveryClient.prototype.onDiscovery = function() {
    var deferred;
    deferred = Q.defer();
    if (this._complete) {
      if (this._error) {
        deferred.reject(this._error);
      } else {
        deferred.resolve(this);
      }
    } else if (this._discovering) {
      this._resolveOnDiscovery.push(deferred);
    }
    return deferred.promise;
  };

  DiscoveryClient.prototype._resolveDiscovery = function(discovery) {
    if (!discovery || !_.isPlainObject(discovery)) {
      throw new Error("Discovery not instanceof an object");
    }
    return this._resolveResources(discovery.resources);
  };

  DiscoveryClient.prototype._resolveResources = function(resources) {
    var resource, resourceName, resultResources;
    if (!_.isPlainObject(resources)) {
      throw new Error("Resources not an object");
    }
    resultResources = {};
    for (resourceName in resources) {
      if (!resources.hasOwnProperty(resourceName)) {
        continue;
      }
      resource = this._resolveResource(resourceName, resources[resourceName]);
      if (resource) {
        resultResources[resourceName] = resource;
      }
    }
    return resultResources;
  };

  DiscoveryClient.prototype._resolveResource = function(resourceName, resource) {
    var method, methodName, methods;
    if (!_.isPlainObject(resource) || !_.isPlainObject(resource.methods)) {
      return null;
    }
    methods = {};
    for (methodName in resource.methods) {
      if (!resource.methods.hasOwnProperty(methodName)) {
        continue;
      }
      method = this._resolveMethod(methodName, resource.methods[methodName]);
      if (method) {
        methods[methodName] = method;
      }
    }
    return new DiscoveryResource(resourceName, methods);
  };

  DiscoveryClient.prototype._resolveMethod = function(methodName, method) {
    if (!_.isPlainObject(method)) {
      return null;
    }
    return new DiscoveryMethod(method.id, method.description, method.httpMethod, method.path, method.parameters, method.parameterOrder, method.request, method.response);
  };

  return DiscoveryClient;

})();

module.exports = {

  /**
  @param {string} endpoint
   */
  getClient: function(endpoint, basePath) {
    return new DiscoveryClient(endpoint, basePath);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsZWV0L2Rpc2NvdmVyeS9jbGllbnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsa0VBQUE7O0FBQUEsQ0FBQSxHQUFvQixPQUFBLENBQVEsR0FBUixDQUFwQixDQUFBOztBQUFBLE9BQ0EsR0FBb0IsT0FBQSxDQUFRLFNBQVIsQ0FEcEIsQ0FBQTs7QUFBQSxpQkFFQSxHQUFvQixPQUFBLENBQVEsWUFBUixDQUZwQixDQUFBOztBQUFBLGVBR0EsR0FBb0IsT0FBQSxDQUFRLFVBQVIsQ0FIcEIsQ0FBQTs7QUFBQSxDQUlBLEdBQW9CLE9BQUEsQ0FBUSxRQUFSLENBSnBCLENBQUE7O0FBQUE7QUFRRSw0QkFBQSxJQUFBLEdBQU0sRUFBTixDQUFBOztBQUFBLDRCQUNBLGdCQUFBLEdBQWtCLEVBRGxCLENBQUE7O0FBQUEsNEJBRUEsRUFBQSxHQUFJLEVBRkosQ0FBQTs7QUFBQSw0QkFHQSxJQUFBLEdBQU0sRUFITixDQUFBOztBQUFBLDRCQUlBLE9BQUEsR0FBUyxFQUpULENBQUE7O0FBQUEsNEJBS0EsS0FBQSxHQUFPLEVBTFAsQ0FBQTs7QUFBQSw0QkFNQSxXQUFBLEdBQWEsRUFOYixDQUFBOztBQUFBLDRCQU9BLFlBQUEsR0FBYyxFQVBkLENBQUE7O0FBQUEsNEJBUUEsUUFBQSxHQUFVLEVBUlYsQ0FBQTs7QUFBQSw0QkFTQSxPQUFBLEdBQVMsRUFUVCxDQUFBOztBQUFBLDRCQVVBLFFBQUEsR0FBVSxFQVZWLENBQUE7O0FBQUEsNEJBV0EsT0FBQSxHQUFTLEVBWFQsQ0FBQTs7QUFBQSw0QkFZQSxXQUFBLEdBQWEsRUFaYixDQUFBOztBQUFBLDRCQWFBLFNBQUEsR0FBVyxFQWJYLENBQUE7O0FBQUEsNEJBY0EsUUFBQSxHQUFVLEVBZFYsQ0FBQTs7QUFBQSw0QkFlQSxTQUFBLEdBQVcsRUFmWCxDQUFBOztBQUFBLDRCQWtCQSxTQUFBLEdBQVcsS0FsQlgsQ0FBQTs7QUFBQSw0QkFtQkEsTUFBQSxHQUFRLElBbkJSLENBQUE7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QUFoQyxFQVZZO0VBQUEsQ0FySGxCLENBQUE7O0FBQUEsNEJBZ0lBLGNBQUEsR0FBZ0IsU0FBQyxVQUFELEVBQWEsTUFBYixHQUFBO0FBQ2QsSUFBQSxJQUFHLENBQUEsQ0FBSyxDQUFDLGFBQUYsQ0FBZ0IsTUFBaEIsQ0FBUDtBQUNFLGFBQU8sSUFBUCxDQURGO0tBQUE7V0FFSSxJQUFBLGVBQUEsQ0FDRixNQUFNLENBQUMsRUFETCxFQUVGLE1BQU0sQ0FBQyxXQUZMLEVBR0YsTUFBTSxDQUFDLFVBSEwsRUFJRixNQUFNLENBQUMsSUFKTCxFQUtGLE1BQU0sQ0FBQyxVQUxMLEVBTUYsTUFBTSxDQUFDLGNBTkwsRUFPRixNQUFNLENBQUMsT0FQTCxFQVFGLE1BQU0sQ0FBQyxRQVJMLEVBSFU7RUFBQSxDQWhJaEIsQ0FBQTs7eUJBQUE7O0lBUkYsQ0FBQTs7QUFBQSxNQXNKTSxDQUFDLE9BQVAsR0FDRTtBQUFBO0FBQUE7O0tBQUE7QUFBQSxFQUdBLFNBQUEsRUFBVyxTQUFDLFFBQUQsRUFBVyxRQUFYLEdBQUE7V0FDTCxJQUFBLGVBQUEsQ0FBZ0IsUUFBaEIsRUFBMEIsUUFBMUIsRUFESztFQUFBLENBSFg7Q0F2SkYsQ0FBQSIsImZpbGUiOiJmbGVldC9kaXNjb3ZlcnkvY2xpZW50LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiUSAgICAgICAgICAgICAgICAgPSByZXF1aXJlKFwicVwiKVxucmVxdWVzdCAgICAgICAgICAgPSByZXF1aXJlKFwicmVxdWVzdFwiKVxuRGlzY292ZXJ5UmVzb3VyY2UgPSByZXF1aXJlKFwiLi9yZXNvdXJjZVwiKVxuRGlzY292ZXJ5TWV0aG9kICAgPSByZXF1aXJlKFwiLi9tZXRob2RcIilcbl8gICAgICAgICAgICAgICAgID0gcmVxdWlyZShcImxvZGFzaFwiKVxuXG5jbGFzcyBEaXNjb3ZlcnlDbGllbnRcbiAgIyBTVEFSVCBWYWx1ZXMgZnJvbSBkaXNjb3ZlcnkuanNvblxuICBraW5kOiBcIlwiXG4gIGRpc2NvdmVyeVZlcnNpb246IFwiXCJcbiAgaWQ6IFwiXCJcbiAgbmFtZTogXCJcIlxuICB2ZXJzaW9uOiBcIlwiXG4gIHRpdGxlOiBcIlwiXG4gIGRlc2NyaXB0aW9uOiBcIlwiXG4gIGRvY3VtZW50TGluazogXCJcIlxuICBwcm90b2NvbDogXCJcIlxuICBiYXNlVXJsOiBcIlwiXG4gIGJhc2VQYXRoOiBcIlwiXG4gIHJvb3RVcmw6IFwiXCJcbiAgc2VydmljZVBhdGg6IFwiXCJcbiAgYmF0Y2hQYXRoOiBcIlwiXG4gIGVuZHBvaW50OiBcIlwiXG4gIHJlc291cmNlczoge31cbiAgIyBFTkQgVmFsdWVzIGZyb20gZGlzY292ZXIuanNvblxuICAjIFNUQVJUIFwiUHJpdmF0ZVwiIHZhcmlhYmxlc1xuICBfY29tcGxldGU6IGZhbHNlXG4gIF9lcnJvcjogbnVsbFxuICBfZGlzY292ZXJpbmc6IGZhbHNlXG4gIF9yZXNvbHZlT25EaXNjb3Zlcnk6IFtdXG4gIF9yZXF1ZXN0OiByZXF1ZXN0XG4gICMgRU5EIFwiUHJpdmF0ZVwiIHZhcmlhYmxlc1xuICAjIyMqXG4gIEBwYXJhbSB7c3RyaW5nfSBlbmRwb2ludFxuICAjIyNcbiAgY29uc3RydWN0b3I6IChlbmRwb2ludCwgYmFzZVBhdGgpIC0+XG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50XG4gICAgaWYgbm90IGVuZHBvaW50XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmRwb2ludCBpcyByZXF1aXJlZFwiKVxuICAgIHRoaXMuYmFzZVBhdGggPSBiYXNlUGF0aFxuICAgIGlmIHRoaXMuYmFzZVBhdGggaXMgbnVsbCBvciB0aGlzLmJhc2VQYXRoIGlzIHVuZGVmaW5lZFxuICAgICAgdGhpcy5iYXNlUGF0aCA9IFwiL3YxLWFscGhhL1wiXG4gIGRvRGlzY292ZXJ5OiAtPlxuICAgIGRlZmVycmVkID0gUS5kZWZlcigpXG4gICAgaWYgdGhpcy5fY29tcGxldGVcbiAgICAgIGlmIHRoaXMuX2Vycm9yXG4gICAgICAgIGRlZmVycmVkLnJlamVjdCh0aGlzLl9lcnJvcilcbiAgICAgIGVsc2VcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0aGlzKVxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgICB0aGlzLl9yZXNvbHZlT25EaXNjb3ZlcnkucHVzaChkZWZlcnJlZClcbiAgICBpZiB0aGlzLl9kaXNjb3ZlcmluZ1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgICB0aGlzLl9kaXNjb3ZlcmluZyA9IHRydWVcbiAgICB0aGlzLl9kb0Rpc2NvdmVyeVJlcXVlc3QoKVxuICAgIGRlZmVycmVkLnByb21pc2VcbiAgX2RvRGlzY292ZXJ5UmVxdWVzdDogIC0+XG4gICAgY2xpZW50ID0gdGhpc1xuICAgIHJlcXVlc3QuZ2V0KFxuICAgICAgXCIje3RoaXMuZW5kcG9pbnR9I3t0aGlzLmJhc2VQYXRofWRpc2NvdmVyeS5qc29uXCIsXG4gICAgKGVycm9yLCByZXNwb25zZSwgYm9keSkgLT5cbiAgICAgIGNsaWVudC5fb25EaXNjb3ZlcnlSZXN1bHQoZXJyb3IsIHJlc3BvbnNlLCBib2R5KVxuICAgIClcbiAgX3JlamVjdFdpdGhFcnJvcjogKGVycm9yKSAtPlxuICAgIHRoaXMuX2Vycm9yID0gZXJyb3JcbiAgICB0aGlzLl9jb21wbGV0ZSA9IHRydWVcbiAgICB0aGlzLl9kaXNjb3ZlcmluZyA9IGZhbHNlXG4gICAgZm9yIGkgaW4gdGhpcy5fcmVzb2x2ZU9uRGlzY292ZXJ5XG4gICAgICBpLnJlamVjdChlcnJvcilcbiAgICB0aGlzLl9yZXNvbHZlT25EaXNjb3ZlcnkgPSBbXVxuICBfcmVzb2x2ZTogLT5cbiAgICB0aGlzLl9lcnJvciA9IG51bGxcbiAgICB0aGlzLl9jb21wbGV0ZSA9IHRydWVcbiAgICB0aGlzLl9kaXNjb3ZlcmluZyA9IGZhbHNlXG4gICAgZm9yIGkgaW4gdGhpcy5fcmVzb2x2ZU9uRGlzY292ZXJ5XG4gICAgICBpLnJlc29sdmUodGhpcylcbiAgICB0aGlzLl9yZXNvbHZlT25EaXNjb3ZlcnkgPSBbXVxuICBfb25EaXNjb3ZlcnlSZXN1bHQ6IChlcnJvciwgcmVzcG9uc2UsIGJvZHkpIC0+XG4gICAgaWYgbm90IGVycm9yIGFuZCByZXNwb25zZS5zdGF0dXNDb2RlIGlzbnQgMjAwXG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgZGlzY292ZXJ5Lmpzb25cIilcbiAgICBpZiBub3QgZXJyb3IgYW5kIG5vdCBib2R5XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcIkRpc2NvdmVyeSBib2R5IGlzIGVtcHR5XCIpXG4gICAgaWYgZXJyb3JcbiAgICAgIHRoaXMuX3JlamVjdFdpdGhFcnJvcihlcnJvcilcbiAgICAgIHJldHVyblxuICAgIGpzb25Cb2R5ID0gbnVsbFxuICAgIHRyeVxuICAgICAganNvbkJvZHkgPSBKU09OLnBhcnNlKGJvZHkpXG4gICAgY2F0Y2ggZXJyXG4gICAgICB0aGlzLl9yZWplY3RXaXRoRXJyb3IoZXJyKVxuICAgICAgcmV0dXJuXG4gICAgaWYgbm90IF8uaXNQbGFpbk9iamVjdChqc29uQm9keSlcbiAgICAgIHRoaXMuX3JlamVjdFdpdGhFcnJvcihuZXcgRXJyb3IoXCJkaXNjb3ZlcnkuanNvbiBib2R5IG5vdCBhbiBvYmplY3RcIikpXG4gICAgICByZXR1cm5cbiAgICB0cnlcbiAgICAgIHRoaXMucmVzb3VyY2VzID0gdGhpcy5fcmVzb2x2ZURpc2NvdmVyeShqc29uQm9keSlcbiAgICBjYXRjaCBlcnJcbiAgICAgIHRoaXMuX3JlamVjdFdpdGhFcnJvcihlcnIpXG4gICAgICByZXR1cm5cbiAgICB0aGlzLl9yZXNvbHZlKClcbiAgb25EaXNjb3Zlcnk6IC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcbiAgICBpZiB0aGlzLl9jb21wbGV0ZVxuICAgICAgaWYgdGhpcy5fZXJyb3JcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KHRoaXMuX2Vycm9yKVxuICAgICAgZWxzZVxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRoaXMpXG4gICAgZWxzZSBpZiB0aGlzLl9kaXNjb3ZlcmluZ1xuICAgICAgdGhpcy5fcmVzb2x2ZU9uRGlzY292ZXJ5LnB1c2goZGVmZXJyZWQpXG4gICAgZGVmZXJyZWQucHJvbWlzZVxuICBfcmVzb2x2ZURpc2NvdmVyeTogKGRpc2NvdmVyeSkgLT5cbiAgICBpZiBub3QgZGlzY292ZXJ5IG9yIG5vdCBfLmlzUGxhaW5PYmplY3QoZGlzY292ZXJ5KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGlzY292ZXJ5IG5vdCBpbnN0YW5jZW9mIGFuIG9iamVjdFwiKVxuICAgIHRoaXMuX3Jlc29sdmVSZXNvdXJjZXMoZGlzY292ZXJ5LnJlc291cmNlcylcbiAgX3Jlc29sdmVSZXNvdXJjZXM6IChyZXNvdXJjZXMpIC0+XG4gICAgaWYgbm90IF8uaXNQbGFpbk9iamVjdChyZXNvdXJjZXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXNvdXJjZXMgbm90IGFuIG9iamVjdFwiKVxuICAgIHJlc3VsdFJlc291cmNlcyA9IHt9XG4gICAgZm9yIHJlc291cmNlTmFtZSBvZiByZXNvdXJjZXNcbiAgICAgIGlmIG5vdCByZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocmVzb3VyY2VOYW1lKVxuICAgICAgICBjb250aW51ZVxuICAgICAgcmVzb3VyY2UgPSB0aGlzLl9yZXNvbHZlUmVzb3VyY2UocmVzb3VyY2VOYW1lLCByZXNvdXJjZXNbcmVzb3VyY2VOYW1lXSlcbiAgICAgIGlmIHJlc291cmNlXG4gICAgICAgIHJlc3VsdFJlc291cmNlc1tyZXNvdXJjZU5hbWVdID0gcmVzb3VyY2VcbiAgICByZXN1bHRSZXNvdXJjZXNcbiAgX3Jlc29sdmVSZXNvdXJjZTogKHJlc291cmNlTmFtZSwgcmVzb3VyY2UpIC0+XG4gICAgaWYgbm90IF8uaXNQbGFpbk9iamVjdChyZXNvdXJjZSkgb3Igbm90IF8uaXNQbGFpbk9iamVjdChyZXNvdXJjZS5tZXRob2RzKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICBtZXRob2RzID0ge31cbiAgICBmb3IgbWV0aG9kTmFtZSBvZiByZXNvdXJjZS5tZXRob2RzXG4gICAgICBpZiBub3QgcmVzb3VyY2UubWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShtZXRob2ROYW1lKVxuICAgICAgICBjb250aW51ZVxuICAgICAgbWV0aG9kID0gdGhpcy5fcmVzb2x2ZU1ldGhvZChtZXRob2ROYW1lLCByZXNvdXJjZS5tZXRob2RzW21ldGhvZE5hbWVdKVxuICAgICAgaWYgbWV0aG9kXG4gICAgICAgIG1ldGhvZHNbbWV0aG9kTmFtZV0gPSBtZXRob2RcbiAgICBuZXcgRGlzY292ZXJ5UmVzb3VyY2UocmVzb3VyY2VOYW1lLCBtZXRob2RzKVxuICBfcmVzb2x2ZU1ldGhvZDogKG1ldGhvZE5hbWUsIG1ldGhvZCkgLT5cbiAgICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KG1ldGhvZClcbiAgICAgIHJldHVybiBudWxsXG4gICAgbmV3IERpc2NvdmVyeU1ldGhvZChcbiAgICAgIG1ldGhvZC5pZCxcbiAgICAgIG1ldGhvZC5kZXNjcmlwdGlvbixcbiAgICAgIG1ldGhvZC5odHRwTWV0aG9kLFxuICAgICAgbWV0aG9kLnBhdGgsXG4gICAgICBtZXRob2QucGFyYW1ldGVycyxcbiAgICAgIG1ldGhvZC5wYXJhbWV0ZXJPcmRlcixcbiAgICAgIG1ldGhvZC5yZXF1ZXN0LFxuICAgICAgbWV0aG9kLnJlc3BvbnNlXG4gICAgKVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gICMjIypcbiAgQHBhcmFtIHtzdHJpbmd9IGVuZHBvaW50XG4gICMjI1xuICBnZXRDbGllbnQ6IChlbmRwb2ludCwgYmFzZVBhdGgpIC0+XG4gICAgbmV3IERpc2NvdmVyeUNsaWVudChlbmRwb2ludCwgYmFzZVBhdGgpXG4iXX0=