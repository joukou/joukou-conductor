var DiscoveryClient, DiscoveryMethod, DiscoveryResource, DiscoverySchema, Q, request, _;

Q = require("q");

request = require("request");

DiscoveryResource = require("./resource");

DiscoveryMethod = require("./method");

DiscoverySchema = require("./schema");

_ = require("lodash");

DiscoveryClient = (function() {
  DiscoveryClient.prototype.kind = "";

  DiscoveryClient.prototype.discoveryVersion = "";

  DiscoveryClient.prototype.id = "";

  DiscoveryClient.prototype.name = "";

  DiscoveryClient.prototype.version = "";

  DiscoveryClient.prototype.title = "";

  DiscoveryClient.prototype.description = "";

  DiscoveryClient.prototype.documentLink = "";

  DiscoveryClient.prototype.protocol = "";

  DiscoveryClient.prototype.baseUrl = "";

  DiscoveryClient.prototype.basePath = "";

  DiscoveryClient.prototype.rootUrl = "";

  DiscoveryClient.prototype.servicePath = "";

  DiscoveryClient.prototype.batchPath = "";

  DiscoveryClient.prototype.endpoint = "";

  DiscoveryClient.prototype.resources = {};

  DiscoveryClient.prototype.schemas = {};

  DiscoveryClient.prototype._complete = false;

  DiscoveryClient.prototype._error = null;

  DiscoveryClient.prototype._discovering = false;

  DiscoveryClient.prototype._resolveOnDiscovery = [];

  DiscoveryClient.prototype._request = request;


  /**
  @param {string} endpoint
  @param {string} [basePath='/v1-alpha/']
  @param {boolean} [doDiscovery=false]
   */

  function DiscoveryClient(endpoint, basePath, doDiscovery) {
    this.endpoint = endpoint;
    this.basePath = basePath;
    this._validateEndpoint();
    if (doDiscovery) {
      this.doDiscovery();
    }
  }

  DiscoveryClient.prototype._validateEndpoint = function() {
    if (!this.endpoint) {
      throw new Error("Endpoint is required");
    }
    if (typeof this.endpoint !== "string") {
      throw new TypeError("Endpoint is expected to be a string");
    }
    if (this.basePath === null || this.basePath === void 0) {
      this.basePath = "/v1-alpha/";
    } else if (typeof this.basePath !== "string") {
      throw new TypeError("Base path is expected to be a string");
    }
    if (this._lastCharacter(this.endpoint) === "/") {
      this.endpoint = this._stripLastCharacter(this.endpoint);
    }
    if (this._firstCharacter(this.basePath) !== "/") {
      this.basePath = "/" + this.basePath;
    }
    if (this._lastCharacter(this.basePath) !== "/") {
      return this.basePath = "" + this.basePath + "/";
    }
  };

  DiscoveryClient.prototype._stripLastCharacter = function(str) {
    var length;
    if (!str || typeof str !== "string") {
      return "";
    }
    length = str.length;
    return str.substring(0, length - 1);
  };

  DiscoveryClient.prototype._firstCharacter = function(str) {
    if (!str || typeof str !== "string") {
      return null;
    }
    return str.substring(0, 1);
  };

  DiscoveryClient.prototype._lastCharacter = function(str) {
    var length;
    if (!str || typeof str !== "string") {
      return null;
    }
    length = str.length;
    return str.substring(length - 1, length);
  };

  DiscoveryClient.prototype.doDiscovery = function() {
    var deferred;
    deferred = Q.defer();
    if (this._complete) {
      if (this._error) {
        deferred.reject(this._error);
      } else {
        deferred.resolve(this);
      }
      return deferred.promise;
    }
    this._resolveOnDiscovery.push(deferred);
    if (this._discovering) {
      return deferred.promise;
    }
    this._discovering = true;
    this._doDiscoveryRequest();
    return deferred.promise;
  };

  DiscoveryClient.prototype._doDiscoveryRequest = function() {
    var client;
    client = this;
    return this._request.get("" + this.endpoint + this.basePath + "discovery.json", function(error, response, body) {
      return client._onDiscoveryResult(error, response, body);
    });
  };

  DiscoveryClient.prototype._rejectWithError = function(error) {
    var i, _i, _len, _ref;
    this._error = error;
    this._complete = true;
    this._discovering = false;
    _ref = this._resolveOnDiscovery;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.reject(error);
    }
    return this._resolveOnDiscovery = [];
  };

  DiscoveryClient.prototype._resolve = function() {
    var i, _i, _len, _ref;
    this._error = null;
    this._complete = true;
    this._discovering = false;
    _ref = this._resolveOnDiscovery;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.resolve(this);
    }
    return this._resolveOnDiscovery = [];
  };

  DiscoveryClient.prototype._onDiscoveryResult = function(error, response, body) {
    var err, jsonBody;
    if (!error && response.statusCode !== 200) {
      error = new Error("Failed to get discovery.json");
    }
    if (!error && !body) {
      error = new Error("Discovery body is empty");
    }
    if (error) {
      this._rejectWithError(error);
      return;
    }
    jsonBody = null;
    try {
      jsonBody = JSON.parse(body);
    } catch (_error) {
      err = _error;
      this._rejectWithError(err);
      return;
    }
    if (!_.isPlainObject(jsonBody)) {
      this._rejectWithError(new Error("discovery.json body not an object"));
      return;
    }
    try {
      this.resources = this._resolveDiscovery(jsonBody);
    } catch (_error) {
      err = _error;
      this._rejectWithError(err);
      return;
    }
    this._attachResources();
    return this._resolve();
  };

  DiscoveryClient.prototype.onDiscovery = function() {
    var deferred;
    deferred = Q.defer();
    if (this._complete) {
      if (this._error) {
        deferred.reject(this._error);
      } else {
        deferred.resolve(this);
      }
    } else if (this._discovering) {
      this._resolveOnDiscovery.push(deferred);
    }
    return deferred.promise;
  };

  DiscoveryClient.prototype._attachResources = function() {
    var key, _results;
    _results = [];
    for (key in this.resources) {
      if (!this.resources.hasOwnProperty(key)) {
        continue;
      }
      _results.push(this[key] = this.resources[key]);
    }
    return _results;
  };

  DiscoveryClient.prototype._resolveDiscovery = function(discovery) {
    if (!discovery || !_.isPlainObject(discovery)) {
      throw new TypeError("Discovery not instanceof an object");
    }
    return this._resolveResources(discovery.resources);
  };

  DiscoveryClient.prototype._resolveResources = function(resources) {
    var resource, resourceName, resultResources;
    if (!_.isPlainObject(resources)) {
      throw new TypeError("Resources not an object");
    }
    resultResources = {};
    for (resourceName in resources) {
      if (!resources.hasOwnProperty(resourceName)) {
        continue;
      }
      resource = this._resolveResource(resourceName, resources[resourceName]);
      if (resource) {
        resultResources[resourceName] = resource;
      }
    }
    return resultResources;
  };

  DiscoveryClient.prototype._resolveResource = function(resourceName, resource) {
    var method, methodName, resultMethods;
    if (!_.isPlainObject(resource) || !_.isPlainObject(resource.methods)) {
      return null;
    }
    resultMethods = {};
    for (methodName in resource.methods) {
      if (!resource.methods.hasOwnProperty(methodName)) {
        continue;
      }
      method = null;
      try {
        method = this._resolveMethod(methodName, resource.methods[methodName]);
      } catch (_error) {
        continue;
      }
      if (method) {
        resultMethods[methodName] = method;
      }
    }
    return new DiscoveryResource(resourceName, resultMethods, this);
  };

  DiscoveryClient.prototype._resolveMethod = function(methodName, method) {
    if (!_.isPlainObject(method)) {
      return null;
    }
    return new DiscoveryMethod(method.id, method.description, method.httpMethod, method.path, method.parameters, method.parameterOrder, method.request, method.response, this);
  };

  DiscoveryClient.prototype._resolveSchemas = function(schemas) {
    var resultSchemas, schema, schemaName;
    if (!_.isPlainObject(schemas)) {
      throw new TypeError("Schemas not an object");
    }
    resultSchemas = {};
    for (schemaName in schemas) {
      if (!schemas.hasOwnProperty(schemaName)) {
        continue;
      }
      schema = null;
      try {
        schema = this._resolveSchema(schemaName, schemas[schemaName]);
      } catch (_error) {
        continue;
      }
      if (schema) {
        resultSchemas[schemaName] = schema;
      }
    }
    return this.schemas = resultSchemas;
  };

  DiscoveryClient.prototype._resolveSchema = function(schemaName, schema) {
    if (!_.isPlainObject(schema)) {
      return null;
    }
    return new DiscoverySchema(schema.id, schema.type, schema.properties, this);
  };

  DiscoveryClient.prototype.getSchema = function(name) {
    return this.schemas[name];
  };

  DiscoveryClient.prototype.hasSchema = function(name) {
    return !!this.schemas[name];
  };

  DiscoveryClient.prototype.getResource = function(name) {
    return this.resources[name];
  };

  DiscoveryClient.prototype.hasResource = function(name) {
    return !!this.resources[name];
  };

  return DiscoveryClient;

})();

module.exports = {

  /**
  @param {string} endpoint
  @param {string} [basePath='/v1-alpha/']
  @param {boolean} [doDiscovery=false]
   */
  getClient: function(endpoint, basePath, doDiscovery) {
    return new DiscoveryClient(endpoint, basePath, doDiscovery);
  }
};

//# sourceMappingURL=data:application/json;base64,