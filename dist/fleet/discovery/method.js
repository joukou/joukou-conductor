var DiscoveryMethod, Q, request, _;

_ = require("lodash");

Q = require("q");

request = require("request");

DiscoveryMethod = (function() {
  DiscoveryMethod.prototype.id = "";

  DiscoveryMethod.prototype.description = "";

  DiscoveryMethod.prototype.httpMethod = "";

  DiscoveryMethod.prototype.path = "";

  DiscoveryMethod.prototype.parameters = {};

  DiscoveryMethod.prototype.parameterOrder = [];

  DiscoveryMethod.prototype.request = {};

  DiscoveryMethod.prototype.response = {};

  DiscoveryMethod.prototype.client = null;

  function DiscoveryMethod(id, description, httpMethod, path, parameters, parameterOrder, req, response, client) {
    this.id = id;
    this.description = description;
    this.httpMethod = httpMethod;
    this.path = path;
    this.parameters = parameters;
    this.parameterOrder = parameterOrder;
    this.request = req;
    this.response = response;
    this.client = client;
    if (!httpMethod || typeof httpMethod !== "string") {
      throw new Error("Http method not provided for " + id);
    } else {
      this.httpMethod = httpMethod.toUpperCase();
    }
    if (!path || typeof path !== "string") {
      throw new Error("Path not provided for " + id);
    }
  }


  /**
  @param {Object} params
  @returns {Promise}
   */

  DiscoveryMethod.prototype.callMethod = function(params) {
    var deferred, err;
    deferred = Q.defer();
    try {
      this._callMethod(params, deferred);
    } catch (_error) {
      err = _error;
      deferred.reject(err);
    }
    return deferred.promise;
  };

  DiscoveryMethod.prototype._callMethod = function(params, deferred) {
    params = params || {};
    if (!_.isPlainObject(params)) {
      throw new TypeError("Params is expected to be an Object");
    }
    params = this._groupValue(params);
    this._checkRequired(params);
    params = _.transform(params, function(result, value, key) {
      return result[key] = value.value;
    });
    return this._doRequest(params, null, deferred);
  };

  DiscoveryMethod.prototype._doRequest = function(params, body, deferred) {
    var method, req;
    req = {
      url: "" + this.client.endpoint + this.client.basePath,
      json: body,
      qs: params,
      method: this.httpMethod
    };
    method = this;
    return request(req, function(err, response, body) {
      return method._onResponse(err, response, body);
    });
  };

  DiscoveryMethod.prototype._onResponse = function(err, response, body, deferred) {
    var jsonBody;
    if (!err && response.statusCode === 200) {
      err = new Error("Status code returned " + response.statusCode);
    }
    if (err) {
      deferred.reject(err);
      return;
    }
    if (!this.response) {
      deferred.resolve(true);
      return;
    }
    if (!body) {
      deferred.resolve();
    }
    jsonBody = null;
    try {
      jsonBody = JSON.parse(body);
    } catch (_error) {
      err = _error;
      deferred.reject(err);
      return;
    }
    return deferred.resolve(jsonBody);
  };

  DiscoveryMethod.prototype._groupValue = function(params) {
    return params = _.merge(this.parameters, params, function(a, b) {
      a = _.clone(a);
      if (!b) {
        return a;
      }
      if (a.type === "string" && typeof b !== "string") {
        b = b.toString();
      }
      if (a.type === typeof b) {
        a.value = b;
      } else {
        throw new TypeError("" + b + " is not typeof " + a.type);
      }
      a.value = b;
      return a;
    });
  };

  DiscoveryMethod.prototype._checkRequired = function(params) {
    var key, required, _i, _len, _results;
    required = _.where(params, {
      required: true
    });
    _results = [];
    for (_i = 0, _len = required.length; _i < _len; _i++) {
      key = required[_i];
      if (!required[key].value) {
        throw new Error("the parameter " + key + " is required");
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return DiscoveryMethod;

})();

module.exports = DiscoveryMethod;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsZWV0L2Rpc2NvdmVyeS9tZXRob2QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsOEJBQUE7O0FBQUEsQ0FBQSxHQUFVLE9BQUEsQ0FBUSxRQUFSLENBQVYsQ0FBQTs7QUFBQSxDQUNBLEdBQVUsT0FBQSxDQUFRLEdBQVIsQ0FEVixDQUFBOztBQUFBLE9BRUEsR0FBVSxPQUFBLENBQVEsU0FBUixDQUZWLENBQUE7O0FBQUE7QUFLRSw0QkFBQSxFQUFBLEdBQUksRUFBSixDQUFBOztBQUFBLDRCQUNBLFdBQUEsR0FBYSxFQURiLENBQUE7O0FBQUEsNEJBRUEsVUFBQSxHQUFZLEVBRlosQ0FBQTs7QUFBQSw0QkFHQSxJQUFBLEdBQU0sRUFITixDQUFBOztBQUFBLDRCQUlBLFVBQUEsR0FBWSxFQUpaLENBQUE7O0FBQUEsNEJBS0EsY0FBQSxHQUFnQixFQUxoQixDQUFBOztBQUFBLDRCQU1BLE9BQUEsR0FBUyxFQU5ULENBQUE7O0FBQUEsNEJBT0EsUUFBQSxHQUFVLEVBUFYsQ0FBQTs7QUFBQSw0QkFRQSxNQUFBLEdBQVEsSUFSUixDQUFBOztBQVNhLEVBQUEseUJBQUMsRUFBRCxFQUNDLFdBREQsRUFFQyxVQUZELEVBR0MsSUFIRCxFQUlDLFVBSkQsRUFLQyxjQUxELEVBTUMsR0FORCxFQU9DLFFBUEQsRUFRQyxNQVJELEdBQUE7QUFTWCxJQUFBLElBQUksQ0FBQyxFQUFMLEdBQVUsRUFBVixDQUFBO0FBQUEsSUFDQSxJQUFJLENBQUMsV0FBTCxHQUFtQixXQURuQixDQUFBO0FBQUEsSUFFQSxJQUFJLENBQUMsVUFBTCxHQUFrQixVQUZsQixDQUFBO0FBQUEsSUFHQSxJQUFJLENBQUMsSUFBTCxHQUFZLElBSFosQ0FBQTtBQUFBLElBSUEsSUFBSSxDQUFDLFVBQUwsR0FBa0IsVUFKbEIsQ0FBQTtBQUFBLElBS0EsSUFBSSxDQUFDLGNBQUwsR0FBc0IsY0FMdEIsQ0FBQTtBQUFBLElBTUEsSUFBSSxDQUFDLE9BQUwsR0FBZSxH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QUEsQ0FBQSxDQUFBLEtBQWMsUUFBeEM7QUFDRSxRQUFBLENBQUEsR0FBSSxDQUFDLENBQUMsUUFBRixDQUFBLENBQUosQ0FERjtPQUhBO0FBS0EsTUFBQSxJQUFHLENBQUMsQ0FBQyxJQUFGLEtBQVUsTUFBQSxDQUFBLENBQWI7QUFDRSxRQUFBLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBVixDQURGO09BQUEsTUFBQTtBQUdFLGNBQVUsSUFBQSxTQUFBLENBQVUsRUFBQSxHQUFHLENBQUgsR0FBSyxpQkFBTCxHQUFzQixDQUFDLENBQUMsSUFBbEMsQ0FBVixDQUhGO09BTEE7QUFBQSxNQVNBLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FUVixDQUFBO0FBVUEsYUFBTyxDQUFQLENBWHdDO0lBQUEsQ0FBakMsRUFERTtFQUFBLENBdEZiLENBQUE7O0FBQUEsNEJBb0dBLGNBQUEsR0FBZ0IsU0FBQyxNQUFELEdBQUE7QUFDZCxRQUFBLGlDQUFBO0FBQUEsSUFBQSxRQUFBLEdBQVcsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxNQUFSLEVBQWdCO0FBQUEsTUFBQSxRQUFBLEVBQVUsSUFBVjtLQUFoQixDQUFYLENBQUE7QUFDQTtTQUFBLCtDQUFBO3lCQUFBO0FBQ0UsTUFBQSxJQUFHLENBQUEsUUFBYSxDQUFBLEdBQUEsQ0FBSSxDQUFDLEtBQXJCO0FBQ0UsY0FBVSxJQUFBLEtBQUEsQ0FBTyxnQkFBQSxHQUFnQixHQUFoQixHQUFvQixjQUEzQixDQUFWLENBREY7T0FBQSxNQUFBOzhCQUFBO09BREY7QUFBQTtvQkFGYztFQUFBLENBcEdoQixDQUFBOzt5QkFBQTs7SUFMRixDQUFBOztBQUFBLE1BZ0hNLENBQUMsT0FBUCxHQUFpQixlQWhIakIsQ0FBQSIsImZpbGUiOiJmbGVldC9kaXNjb3ZlcnkvbWV0aG9kLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXyAgICAgICA9IHJlcXVpcmUoXCJsb2Rhc2hcIilcblEgICAgICAgPSByZXF1aXJlKFwicVwiKVxucmVxdWVzdCA9IHJlcXVpcmUoXCJyZXF1ZXN0XCIpXG5cbmNsYXNzIERpc2NvdmVyeU1ldGhvZFxuICBpZDogXCJcIlxuICBkZXNjcmlwdGlvbjogXCJcIlxuICBodHRwTWV0aG9kOiBcIlwiXG4gIHBhdGg6IFwiXCJcbiAgcGFyYW1ldGVyczoge31cbiAgcGFyYW1ldGVyT3JkZXI6IFtdXG4gIHJlcXVlc3Q6IHt9XG4gIHJlc3BvbnNlOiB7fVxuICBjbGllbnQ6IG51bGxcbiAgY29uc3RydWN0b3I6IChpZCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBodHRwTWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJPcmRlcixcbiAgICAgICAgICAgICAgICByZXEsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgY2xpZW50KSAtPlxuICAgIHRoaXMuaWQgPSBpZFxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvblxuICAgIHRoaXMuaHR0cE1ldGhvZCA9IGh0dHBNZXRob2RcbiAgICB0aGlzLnBhdGggPSBwYXRoXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVyc1xuICAgIHRoaXMucGFyYW1ldGVyT3JkZXIgPSBwYXJhbWV0ZXJPcmRlclxuICAgIHRoaXMucmVxdWVzdCA9IHJlcVxuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZVxuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50XG4gICAgaWYgbm90IGh0dHBNZXRob2Qgb3IgdHlwZW9mIGh0dHBNZXRob2QgaXNudCBcInN0cmluZ1wiXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIdHRwIG1ldGhvZCBub3QgcHJvdmlkZWQgZm9yICN7aWR9XCIpXG4gICAgZWxzZVxuICAgICAgdGhpcy5odHRwTWV0aG9kID0gaHR0cE1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgaWYgbm90IHBhdGggb3IgdHlwZW9mIHBhdGggaXNudCBcInN0cmluZ1wiXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXRoIG5vdCBwcm92aWRlZCBmb3IgI3tpZH1cIilcbiAgIyMjKlxuICBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gIEByZXR1cm5zIHtQcm9taXNlfVxuICAjIyNcbiAgY2FsbE1ldGhvZDogKHBhcmFtcykgLT5cbiAgICBkZWZlcnJlZCA9IFEuZGVmZXIoKVxuICAgIHRyeVxuICAgICAgIyBXcmFwIHRoZSB3aG9sZSBmdW5jdGlvbiBvciBpdCBpcyBqdXN0XG4gICAgICAjIEJsb2F0ZWQgd2l0aCB0cnkgY2F0Y2hlc1xuICAgICAgdGhpcy5fY2FsbE1ldGhvZChwYXJhbXMsIGRlZmVycmVkKVxuICAgIGNhdGNoIGVyclxuICAgICAgZGVmZXJyZWQucmVqZWN0KGVycilcbiAgICBkZWZlcnJlZC5wcm9taXNlXG4gIF9jYWxsTWV0aG9kOiAocGFyYW1zLCBkZWZlcnJlZCkgLT5cbiAgICBwYXJhbXMgPSBwYXJhbXMgb3Ige31cbiAgICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KHBhcmFtcylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gT2JqZWN0XCIpXG4gICAgcGFyYW1zID0gdGhpcy5fZ3JvdXBWYWx1ZShwYXJhbXMpXG4gICAgdGhpcy5fY2hlY2tSZXF1aXJlZChwYXJhbXMpXG4gICAgIyB0dXJuIHRoZSBxdWVyeSBzdHJpbmcgaW50byBrZXkgdmFsdWUgcGFpcnNcbiAgICBwYXJhbXMgPSBfLnRyYW5zZm9ybShwYXJhbXMsIChyZXN1bHQsIHZhbHVlLCBrZXkpIC0+XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlLnZhbHVlXG4gICAgKVxuICAgIHRoaXMuX2RvUmVxdWVzdChwYXJhbXMsIG51bGwsIGRlZmVycmVkKVxuICBfZG9SZXF1ZXN0OiAocGFyYW1zLCBib2R5LCBkZWZlcnJlZCkgLT5cbiAgICByZXEgPVxuICAgICAgdXJsOiBcIiN7dGhpcy5jbGllbnQuZW5kcG9pbnR9I3t0aGlzLmNsaWVudC5iYXNlUGF0aH1cIlxuICAgICAgIyBXaWxsIHNldCBjb250ZW50L3R5cGUgdG8gYXBwbGljYXRpb24vanNvblxuICAgICAganNvbjogYm9keVxuICAgICAgcXM6IHBhcmFtc1xuICAgICAgbWV0aG9kOiB0aGlzLmh0dHBNZXRob2RcbiAgICBtZXRob2QgPSB0aGlzXG4gICAgcmVxdWVzdChyZXEsIChlcnIsIHJlc3BvbnNlLCBib2R5KSAtPlxuICAgICAgbWV0aG9kLl9vblJlc3BvbnNlKGVyciwgcmVzcG9uc2UsIGJvZHkpXG4gICAgKVxuICBfb25SZXNwb25zZTogKGVyciwgcmVzcG9uc2UsIGJvZHksIGRlZmVycmVkKSAtPlxuICAgIGlmIG5vdCBlcnIgYW5kIHJlc3BvbnNlLnN0YXR1c0NvZGUgaXMgMjAwXG4gICAgICBlcnIgPSBuZXcgRXJyb3IoXCJTdGF0dXMgY29kZSByZXR1cm5lZCAje3Jlc3BvbnNlLnN0YXR1c0NvZGV9XCIpXG4gICAgaWYgZXJyXG4gICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKVxuICAgICAgcmV0dXJuXG4gICAgaWYgbm90IHRoaXMucmVzcG9uc2VcbiAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSlcbiAgICAgIHJldHVyblxuICAgIGlmIG5vdCBib2R5XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKClcbiAgICBqc29uQm9keSA9IG51bGxcbiAgICB0cnlcbiAgICAgIGpzb25Cb2R5ID0gSlNPTi5wYXJzZShib2R5KVxuICAgIGNhdGNoIGVyclxuICAgICAgZGVmZXJyZWQucmVqZWN0KGVycilcbiAgICAgIHJldHVyblxuICAgIGRlZmVycmVkLnJlc29sdmUoanNvbkJvZHkpXG4gIF9ncm91cFZhbHVlOiAocGFyYW1zKSAtPlxuICAgIHBhcmFtcyA9IF8ubWVyZ2UodGhpcy5wYXJhbWV0ZXJzLCBwYXJhbXMsIChhLCBiKSAtPlxuICAgICAgYSA9IF8uY2xvbmUoYSlcbiAgICAgIGlmIG5vdCBiXG4gICAgICAgIHJldHVybiBhXG4gICAgICBpZiBhLnR5cGUgaXMgXCJzdHJpbmdcIiBhbmQgdHlwZW9mIGIgaXNudCBcInN0cmluZ1wiXG4gICAgICAgIGIgPSBiLnRvU3RyaW5nKClcbiAgICAgIGlmIGEudHlwZSBpcyB0eXBlb2YgYlxuICAgICAgICBhLnZhbHVlID0gYlxuICAgICAgZWxzZVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiI3tifSBpcyBub3QgdHlwZW9mICN7YS50eXBlfVwiKVxuICAgICAgYS52YWx1ZSA9IGJcbiAgICAgIHJldHVybiBhXG4gICAgKVxuICBfY2hlY2tSZXF1aXJlZDogKHBhcmFtcykgLT5cbiAgICByZXF1aXJlZCA9IF8ud2hlcmUocGFyYW1zLCByZXF1aXJlZDogdHJ1ZSlcbiAgICBmb3Iga2V5IGluIHJlcXVpcmVkXG4gICAgICBpZiBub3QgcmVxdWlyZWRba2V5XS52YWx1ZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aGUgcGFyYW1ldGVyICN7a2V5fSBpcyByZXF1aXJlZFwiKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gRGlzY292ZXJ5TWV0aG9kIl19