var DiscoveryMethod, Q, request, _;

_ = require("lodash");

Q = require("q");

request = require("request");

DiscoveryMethod = (function() {
  DiscoveryMethod.prototype.id = "";

  DiscoveryMethod.prototype.description = "";

  DiscoveryMethod.prototype.httpMethod = "";

  DiscoveryMethod.prototype.path = "";

  DiscoveryMethod.prototype.parameters = {};

  DiscoveryMethod.prototype.parameterOrder = [];

  DiscoveryMethod.prototype.request = {};

  DiscoveryMethod.prototype.response = {};

  DiscoveryMethod.prototype.client = null;

  function DiscoveryMethod(id, description, httpMethod, path, parameters, parameterOrder, req, response, client) {
    this.id = id;
    this.description = description;
    this.httpMethod = httpMethod;
    this.path = path;
    this.parameters = parameters;
    this.parameterOrder = parameterOrder;
    this.request = req;
    this.response = response;
    this.client = client;
    if (!httpMethod || typeof httpMethod !== "string") {
      throw new Error("Http method not provided for " + id);
    } else {
      this.httpMethod = httpMethod.toUpperCase();
    }
    if (!path || typeof path !== "string") {
      throw new Error("Path not provided for " + id);
    }
  }


  /**
  @param {Object} params
  @returns {Promise}
   */

  DiscoveryMethod.prototype.callMethod = function(params) {
    var deferred, err;
    deferred = Q.defer();
    try {
      this._callMethod(params, deferred);
    } catch (_error) {
      err = _error;
      deferred.reject(err);
    }
    return deferred.promise;
  };

  DiscoveryMethod.prototype._callMethod = function(params, deferred) {
    params = params || {};
    if (!_.isPlainObject(params)) {
      throw new TypeError("Params is expected to be an Object");
    }
    params = this._groupValue(params);
    this._checkRequired(params);
    params = _.transform(params, function(result, value, key) {
      return result[key] = value.value;
    });
    return this._doRequest(params, null, deferred);
  };

  DiscoveryMethod.prototype._doRequest = function(params, body, deferred) {
    var method, req;
    req = {
      url: "" + this.client.endpoint + this.client.basePath,
      json: body,
      qs: params,
      method: this.httpMethod
    };
    method = this;
    return request(req, function(err, response, body) {
      return method._onResponse(err, response, body);
    });
  };

  DiscoveryMethod.prototype._onResponse = function(err, response, body) {};

  DiscoveryMethod.prototype._groupValue = function(params) {
    return params = _.merge(this.parameters, params, function(a, b) {
      a = _.clone(a);
      if (!b) {
        return a;
      }
      if (a.type === "string" && typeof b !== "string") {
        b = b.toString();
      }
      if (a.type === typeof b) {
        a.value = b;
      } else {
        throw new TypeError("" + b + " is not typeof " + a.type);
      }
      a.value = b;
      return a;
    });
  };

  DiscoveryMethod.prototype._checkRequired = function(params) {
    var key, required, _i, _len, _results;
    required = _.where(params, {
      required: true
    });
    _results = [];
    for (_i = 0, _len = required.length; _i < _len; _i++) {
      key = required[_i];
      if (!required[key].value) {
        throw new Error("the parameter " + key + " is required");
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return DiscoveryMethod;

})();

module.exports = DiscoveryMethod;

//# sourceMappingURL=data:application/json;base64,