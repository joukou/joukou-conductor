var DiscoverySchema, schema;

schema = require("schemajs");

DiscoverySchema = (function() {
  DiscoverySchema.prototype.id = "";

  DiscoverySchema.prototype.type = "";

  DiscoverySchema.prototype.properties = {};

  DiscoverySchema.prototype.schema = null;

  DiscoverySchema.prototype.schemaOptions = null;

  DiscoverySchema.prototype.client = null;


  /**
  * @param {string} id
  * @param {string} type
  * @param {Object} properties
   */

  function DiscoverySchema(id, type, properties, client) {
    this.id = id;
    this.type = type;
    this.properties = properties;
    this.client = client;
    if (!type) {
      throw new Error("Type is required");
    }
  }

  DiscoverySchema.prototype.validate = function(value) {
    var reason, validation, values;
    if (value === null || value === void 0) {
      return {
        valid: false,
        value: value,
        reason: "Value is null or undefined"
      };
    }
    if (this.type === "string" && typeof value !== string) {
      value = JSON.parse(value);
    }
    if (this._checkType(value, this.type)) {
      return {
        valid: false,
        value: value,
        reason: "Type of value isn't " + this.type
      };
    }
    if (this.type === "object") {
      validation = this._validateSchema(value);
      if (validation.valid) {
        return {
          valid: true,
          value: validation.data
        };
      } else {
        values = _.values(validation.errors);
        reason = "request is not valid";
        if (values.length) {
          reason = values[0];
        }
        return {
          valid: false,
          value: value,
          reason: reason
        };
      }
    } else {
      return {
        valid: true,
        value: value
      };
    }
  };

  DiscoverySchema.prototype._checkType = function(value, type) {
    switch (type) {
      case "array":
        return _.isArray(value);
      case "object":
        return _.isPlainObject(value);
      case "string":
        return _.isString(value);
      case "integer":
        if (!_.isNumber(value)) {
          return false;
        }
        return value === parseInt(value);
      case "number":
        return _.isNumber(value);
      case "boolean":
        return _.isBoolean(value);
      case "any":
        return true;
      default:
        return false;
    }
  };

  DiscoverySchema.prototype._validateSchema = function(value) {
    this._generateSchema();
    return this.schema.validate(value);
  };

  DiscoverySchema.prototype._generateSchema = function() {
    if (!schema.types.any) {
      schema.types.any = function() {
        return true;
      };
    }
    return this.schema = this.schema || schema.create(this._generateSchemaOptions());
  };

  DiscoverySchema.prototype._generateSchemaOptions = function() {
    var key, options, property, ref, type, _i, _len, _ref;
    if (this.schemaOptions) {
      return this.schemaOptions;
    }
    options = {};
    _ref = this.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (!this.properties.hasOwnProperty(key)) {
        continue;
      }
      property = this.properties[key];
      if (property.type === "array") {
        options[key] = {
          type: "array",
          required: !!property.required
        };
        if (!(property.items instanceof Object)) {
          continue;
        }
        if (!property.items.$ref) {
          continue;
        }
        ref = property.items.$ref;
        schema = this.client.getSchema(ref);
        if (!schema || schema === this) {
          continue;
        }
        options[key].schema = this.client.getSchema(ref)._generateSchemaOptions();
      } else if (property.type === "object") {
        options[key] = {
          type: "object",
          required: !!property.required
        };
        if (!property.$ref) {
          continue;
        }
        ref = property.$ref;
        schema = this.client.getSchema(ref);
        if (!schema || schema === this) {
          continue;
        }
        options[key].schema = this.client.getSchema(ref)._generateSchemaOptions();
      } else {
        type = null;
        if (property.type === "integer") {
          type = "int";
        } else {
          type = property.type;
        }
        options[key] = {
          type: type,
          required: !!property.required
        };
      }
    }
    return this.schemaOptions = options;
  };

  return DiscoverySchema;

})();

module.exports = DiscoverySchema;

//# sourceMappingURL=data:application/json;base64,