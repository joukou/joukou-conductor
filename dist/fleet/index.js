
/**
@module joukou-conductor/fleet/index
@author Fabian Cook <fabian.cook@joukou.com>
@copyright (c) 2009-2014 Joukou Ltd. All rights reserved.
 */
var FleetClient, Q, discovery;

Q = require("Q");

discovery = require("./discovery");

FleetClient = (function() {
  FleetClient.prototype.discoveryClient = null;

  function FleetClient(endpoint) {
    var discoveryClient;
    discoveryClient = discovery.getClient(endpoint);
    discoveryClient.doDiscovery();
  }

  FleetClient.prototype.createUnit = function(name, options, desiredState, currentState, machineId) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.setUnitDesiredState = function(name, desiredState) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getUnitDesiredState = function(name) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getUnitDesiredStates = function() {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.destroyUnit = function(unitName) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getMachineStates = function(machineId) {
    return getState({
      machineId: machineId
    });
  };

  FleetClient.prototype.getUnitStates = function(unitName) {
    return getState({
      unitName: unitName
    });
  };

  FleetClient.prototype.getStates = function(opts) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getMachines = function() {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  return FleetClient;

})();

module.exports = {
  getClient: function(endpoint) {
    return new FleetClient(endpoint);
  }
};

//# sourceMappingURL=data:application/json;base64,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b290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIyMqXG5AbW9kdWxlIGpvdWtvdS1jb25kdWN0b3IvZmxlZXQvaW5kZXhcbkBhdXRob3IgRmFiaWFuIENvb2sgPGZhYmlhbi5jb29rQGpvdWtvdS5jb20+XG5AY29weXJpZ2h0IChjKSAyMDA5LTIwMTQgSm91a291IEx0ZC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiMjI1xuXG5RICAgICAgICAgPSByZXF1aXJlKFwiUVwiKVxuZGlzY292ZXJ5ID0gcmVxdWlyZShcIi4vZGlzY292ZXJ5XCIpXG5cbmNsYXNzIEZsZWV0Q2xpZW50XG4gIGRpc2NvdmVyeUNsaWVudDogbnVsbFxuICBjb25zdHJ1Y3RvcjogKGVuZHBvaW50KSAtPlxuICAgIGRpc2NvdmVyeUNsaWVudCA9IGRpc2NvdmVyeS5nZXRDbGllbnQoZW5kcG9pbnQpXG4gICAgZGlzY292ZXJ5Q2xpZW50LmRvRGlzY292ZXJ5KClcbiAgIyBodHRwczovL2dpdGh1Yi5jb20vY29yZW9zL2ZsZWV0L2Jsb2IvbWFzdGVyL0RvY3VtZW50YXRpb24vYXBpLXYxLWFscGhhLm1kI2NyZWF0ZS1hLXVuaXRcbiAgY3JlYXRlVW5pdDogKG5hbWUsIG9wdGlvbnMsIGRlc2lyZWRTdGF0ZSwgY3VycmVudFN0YXRlLCBtYWNoaW5lSWQpIC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjbW9kaWZ5LWRlc2lyZWQtc3RhdGUtb2YtYS11bml0XG4gIHNldFVuaXREZXNpcmVkU3RhdGU6IChuYW1lLCBkZXNpcmVkU3RhdGUpIC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjcmV0cmlldmUtZGVzaXJlZC1zdGF0ZS1vZi1hLXNwZWNpZmljLXVuaXRcbiAgZ2V0VW5pdERlc2lyZWRTdGF0ZTogKG5hbWUpIC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjcmV0cmlldmUtZGVzaXJlZC1zdGF0ZS1vZi1hbGwtdW5pdHNcbiAgZ2V0VW5pdERlc2lyZWRTdGF0ZXM6IC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjZGVzdHJveS1hLXVuaXRcbiAgZGVzdHJveVVuaXQ6ICh1bml0TmFtZSkgLT5cbiAgICBkZWZlcnJlZCA9IFEuZGVmZXIoKVxuXG4gICAgZGVmZXJyZWQucHJvbWlzZVxuXG4gICMgaHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9mbGVldC9ibG9iL21hc3Rlci9Eb2N1bWVudGF0aW9uL2FwaS12MS1hbHBoYS5tZCNyZXRyaWV2ZS1jdXJyZW50LXN0YXRlLW9mLWFsbC11bml0c1xuICBnZXRNYWNoaW5lU3RhdGVzOiAobWFjaGluZUlkKSAtPlxuICAgIHJldHVybiBnZXRTdGF0ZShcbiAgICAgIG1hY2hpbmVJZDogbWFjaGluZUlkXG4gICAgKVxuXG4gICMgaHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9mbGVldC9ibG9iL21hc3Rlci9Eb2N1bWVudGF0aW9uL2FwaS12MS1hbHBoYS5tZCNyZXRyaWV2ZS1jdXJyZW50LXN0YXRlLW9mLWFsbC11bml0c1xuICBnZXRVbml0U3RhdGVzOiAodW5pdE5hbWUpIC0+XG4gICAgcmV0dXJuIGdldFN0YXRlKFxuICAgICAgdW5pdE5hbWU6IHVuaXROYW1lXG4gICAgKVxuXG4gICMgaHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9mbGVldC9ibG9iL21hc3Rlci9Eb2N1bWVudGF0aW9uL2FwaS12MS1hbHBoYS5tZCNyZXRyaWV2ZS1jdXJyZW50LXN0YXRlLW9mLWFsbC11bml0c1xuICBnZXRTdGF0ZXM6IChvcHRzKSAtPlxuICAgIGRlZmVycmVkID0gUS5kZWZlcigpXG5cbiAgICBkZWZlcnJlZC5wcm9taXNlXG5cbiAgIyBodHRwczovL2dpdGh1Yi5jb20vY29yZW9zL2ZsZWV0L2Jsb2IvbWFzdGVyL0RvY3VtZW50YXRpb24vYXBpLXYxLWFscGhhLm1kI2xpc3QtbWFjaGluZXNcbiAgZ2V0TWFjaGluZXM6IC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxubW9kdWxlLmV4cG9ydHMgPVxuICBnZXRDbGllbnQ6IChlbmRwb2ludCkgLT5cbiAgICBuZXcgRmxlZXRDbGllbnQoZW5kcG9pbnQpIl19