
/**
@module joukou-conductor/fleet/index
@author Fabian Cook <fabian.cook@joukou.com>
@copyright (c) 2009-2014 Joukou Ltd. All rights reserved.
 */
var FleetClient, Q, discovery;

Q = require("Q");

discovery = require("./discovery/client");

FleetClient = (function() {

  /**
  @type {DiscoveryClient}
   */
  FleetClient.prototype.discoveryClient = null;

  function FleetClient(endpoint) {
    var discoveryClient;
    discoveryClient = client.getClient(endpoint);
    discoveryClient.doDiscovery();
  }

  FleetClient.prototype.createUnit = function(name, options, desiredState, currentState, machineId) {
    var deferred;
    deferred = Q.defer();
    self.discoveryClient.onDiscovery().then(function(client) {});
    return deferred.promise;
  };

  FleetClient.prototype.setUnitDesiredState = function(name, desiredState) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getUnitDesiredState = function(name) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getUnitDesiredStates = function() {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.destroyUnit = function(unitName) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getMachineStates = function(machineId) {
    return self.getState({
      machineId: machineId
    });
  };

  FleetClient.prototype.getUnitStates = function(unitName) {
    return self.getState({
      unitName: unitName
    });
  };

  FleetClient.prototype.getStates = function(opts) {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  FleetClient.prototype.getMachines = function() {
    var deferred;
    deferred = Q.defer();
    return deferred.promise;
  };

  return FleetClient;

})();

module.exports = {
  getClient: function(endpoint) {
    return new FleetClient(endpoint);
  }
};

//# sourceMappingURL=data:application/json;base64,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T0FBUCxHQUNFO0FBQUEsRUFBQSxTQUFBLEVBQVcsU0FBQyxRQUFELEdBQUE7V0FDTCxJQUFBLFdBQUEsQ0FBWSxRQUFaLEVBREs7RUFBQSxDQUFYO0NBNUVGLENBQUEiLCJmaWxlIjoiZmxlZXQvaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIyMqXG5AbW9kdWxlIGpvdWtvdS1jb25kdWN0b3IvZmxlZXQvaW5kZXhcbkBhdXRob3IgRmFiaWFuIENvb2sgPGZhYmlhbi5jb29rQGpvdWtvdS5jb20+XG5AY29weXJpZ2h0IChjKSAyMDA5LTIwMTQgSm91a291IEx0ZC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiMjI1xuXG5RICAgICAgICAgPSByZXF1aXJlKFwiUVwiKVxuZGlzY292ZXJ5ID0gcmVxdWlyZShcIi4vZGlzY292ZXJ5L2NsaWVudFwiKVxuXG5jbGFzcyBGbGVldENsaWVudFxuICAjIyMqXG4gIEB0eXBlIHtEaXNjb3ZlcnlDbGllbnR9XG4gICMjI1xuICBkaXNjb3ZlcnlDbGllbnQ6IG51bGxcbiAgY29uc3RydWN0b3I6IChlbmRwb2ludCkgLT5cbiAgICBkaXNjb3ZlcnlDbGllbnQgPSBjbGllbnQuZ2V0Q2xpZW50KGVuZHBvaW50KVxuICAgIGRpc2NvdmVyeUNsaWVudC5kb0Rpc2NvdmVyeSgpXG4gICMgaHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9mbGVldC9ibG9iL21hc3Rlci9Eb2N1bWVudGF0aW9uL2FwaS12MS1hbHBoYS5tZCNjcmVhdGUtYS11bml0XG4gIGNyZWF0ZVVuaXQ6IChuYW1lLCBvcHRpb25zLCBkZXNpcmVkU3RhdGUsIGN1cnJlbnRTdGF0ZSwgbWFjaGluZUlkKSAtPlxuICAgIGRlZmVycmVkID0gUS5kZWZlcigpXG4gICAgc2VsZi5kaXNjb3ZlcnlDbGllbnRcbiAgICAgIC5vbkRpc2NvdmVyeSgpXG4gICAgICAudGhlbigoY2xpZW50KSAtPlxuXG4gICAgKVxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjbW9kaWZ5LWRlc2lyZWQtc3RhdGUtb2YtYS11bml0XG4gIHNldFVuaXREZXNpcmVkU3RhdGU6IChuYW1lLCBkZXNpcmVkU3RhdGUpIC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjcmV0cmlldmUtZGVzaXJlZC1zdGF0ZS1vZi1hLXNwZWNpZmljLXVuaXRcbiAgZ2V0VW5pdERlc2lyZWRTdGF0ZTogKG5hbWUpIC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjcmV0cmlldmUtZGVzaXJlZC1zdGF0ZS1vZi1hbGwtdW5pdHNcbiAgZ2V0VW5pdERlc2lyZWRTdGF0ZXM6IC0+XG4gICAgZGVmZXJyZWQgPSBRLmRlZmVyKClcblxuICAgIGRlZmVycmVkLnByb21pc2VcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjZGVzdHJveS1hLXVuaXRcbiAgZGVzdHJveVVuaXQ6ICh1bml0TmFtZSkgLT5cbiAgICBkZWZlcnJlZCA9IFEuZGVmZXIoKVxuXG4gICAgZGVmZXJyZWQucHJvbWlzZVxuXG4gICMgaHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9mbGVldC9ibG9iL21hc3Rlci9Eb2N1bWVudGF0aW9uL2FwaS12MS1hbHBoYS5tZCNyZXRyaWV2ZS1jdXJyZW50LXN0YXRlLW9mLWFsbC11bml0c1xuICBnZXRNYWNoaW5lU3RhdGVzOiAobWFjaGluZUlkKSAtPlxuICAgIHJldHVybiBzZWxmLmdldFN0YXRlKFxuICAgICAgbWFjaGluZUlkOiBtYWNoaW5lSWRcbiAgICApXG5cbiAgIyBodHRwczovL2dpdGh1Yi5jb20vY29yZW9zL2ZsZWV0L2Jsb2IvbWFzdGVyL0RvY3VtZW50YXRpb24vYXBpLXYxLWFscGhhLm1kI3JldHJpZXZlLWN1cnJlbnQtc3RhdGUtb2YtYWxsLXVuaXRzXG4gIGdldFVuaXRTdGF0ZXM6ICh1bml0TmFtZSkgLT5cbiAgICByZXR1cm4gc2VsZi5nZXRTdGF0ZShcbiAgICAgIHVuaXROYW1lOiB1bml0TmFtZVxuICAgIClcblxuICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvZmxlZXQvYmxvYi9tYXN0ZXIvRG9jdW1lbnRhdGlvbi9hcGktdjEtYWxwaGEubWQjcmV0cmlldmUtY3VycmVudC1zdGF0ZS1vZi1hbGwtdW5pdHNcbiAgZ2V0U3RhdGVzOiAob3B0cykgLT5cbiAgICBkZWZlcnJlZCA9IFEuZGVmZXIoKVxuXG4gICAgZGVmZXJyZWQucHJvbWlzZVxuXG4gICMgaHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9mbGVldC9ibG9iL21hc3Rlci9Eb2N1bWVudGF0aW9uL2FwaS12MS1hbHBoYS5tZCNsaXN0LW1hY2hpbmVzXG4gIGdldE1hY2hpbmVzOiAtPlxuICAgIGRlZmVycmVkID0gUS5kZWZlcigpXG5cbiAgICBkZWZlcnJlZC5wcm9taXNlXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgZ2V0Q2xpZW50OiAoZW5kcG9pbnQpIC0+XG4gICAgbmV3IEZsZWV0Q2xpZW50KGVuZHBvaW50KSJdfQ==