var SystemDUnitFile, checkForBrokenConnections, createFile, createFromSchema, createOptions, findPorts, generateConnectionKeys, _;

SystemDUnitFile = require("../systemd/unit-file");

_ = require("lodash");

createFromSchema = function(input, machineID, joukouMessageQueAddress, joukouApiAddress) {
  var connections, name, processes;
  if (!_.isPlainObject(input)) {
    throw new TypeError("input is not an object");
  }
  if (!machineID) {
    throw new Error("machineID is required");
  }
  if (typeof machineID !== "string") {
    throw new TypeError("machineID is not a string");
  }
  if (typeof joukouMessageQueAddress !== "string") {
    throw new TypeError("joukouMessageQueAddress is not a string");
  }
  if (typeof joukouApiAddress !== "string") {
    throw new TypeError("joukouApiAddress is not a string");
  }
  if (!_.isPlainObject(input.properties)) {
    throw new TypeError("input.properties is not an object");
  }
  if (!_.isPlainObject(input.processes)) {
    throw new TypeError("input.processes is not an object");
  }
  if (!_.isArray(input.connections)) {
    throw new TypeError("input.connections is not an array");
  }
  name = input.properties.name;
  if (!name) {
    throw new Error("input.properties.name is required");
  }
  connections = _.cloneDeep(input.connections);
  checkForBrokenConnections(connections);
  processes = _.cloneDeep(input.processes);
  return createOptions(name, processes, connections, machineID, joukouMessageQueAddress, joukouApiAddress);
};

createOptions = function(name, processes, connections, machineID, joukouMessageQueAddress, joukouApiAddress) {
  var file, options, process, processKey, unit;
  options = [];

  /*
  use format
  [
    {
      unitName: "name"
      options: [SystemDUnitFile].options
      machineID: machineID
    }
  ]
   */
  for (processKey in processes) {
    if (!processes.hasOwnProperty(processKey)) {
      continue;
    }
    process = processes[processKey];
    unit = {
      process: process,
      processKey: processKey,
      machineID: machineID,
      dockerContainer: process.component,
      ports: findPorts(connections, processKey)
    };
    generateConnectionKeys(unit.ports);
    file = createFile(unit, joukouMessageQueAddress, joukouApiAddress);
    options.push({
      unitName: processKey,
      options: file.options,
      machineID: machineID
    });
  }
  return options;
};

createFile = function(unit, joukouMessageQueAddress, joukouApiAddress) {
  var file, key, port, _i, _len, _ref;
  file = new SystemDUnitFile();
  file.service.addEnvironment("JOUKOU_AMQP_ADDR", joukouMessageQueAddress);
  file.service.addEnvironment("JOUKOU_API_ADDR", joukouApiAddress);
  _ref = unit.ports;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    port = _ref[_i];
    key = "JOUKOU_CIRCLE_" + port.type + "_" + port.name + "_";
    file.service.addEnvironment("" + key + "EXCHANGE", port.port.exchangeKey);
    file.service.addEnvironment("" + key + "ROUTING_KEY", port.port.routingKey);
  }
  file.service.addUser("root");
  file.service.addType("notify");
  file.service.addNotifyAccess("all");
  file.service.addTimeoutStartSec("12min");
  file.service.addTimeoutStopSec("15");
  file.service.addRestart("on-failure");
  file.service.addRestartSec("10s");
  file.service.addEnvironmentFile("/run/docker.env");
  file.service.addExecStartPre("/usr/bin/docker run --rm -v " + "/opt/bin:/opt/bin ibuildthecloud/systemd-docker");
  file.service.addExecStartPre("/usr/bin/docker pull " + unit.dockerContainer);
  file.service.addExecStartPre("-/usr/bin/docker kill %p");
  file.service.addExecStartPre("-/usr/bin/docker rm %p");
  file.service.addExecStart("/opt/bin/systemd-docker run --name %p " + unit.dockerContainer);
  file.service.addExecStop("/usr/bin/docker kill %p");
  file.unit.addDescription("Unit for " + unit.dockerContainer);
  file.unit.addDocumentation(unit.dockerContainer);
  file.unit.addAfter("docker.service");
  file.unit.addRequires("docker.service");
  file.unit.addAfter("rabbitmq.service");
  file.unit.addRequires("rabbitmq.service");
  file.unit.addAfter("riak.service");
  file.unit.addRequires("riak.service");
  return file;
};

generateConnectionKeys = function(ports) {
  var port, portObject, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = ports.length; _i < _len; _i++) {
    portObject = ports[_i];
    port = portObject.port;
    if (!port.exchangeKey) {
      port.exchangeKey = "FAKE_EXCHANGE";
      _results.push(port.routingKey = "FAKE_ROUTING");
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

checkForBrokenConnections = function(connections) {
  var connection, i, source, target, _results;
  i = 0;
  _results = [];
  while (i < connections.length) {
    connection = connections[i];
    i++;
    if (!_.isPlainObject(connection)) {
      continue;
    }
    target = connection["tgt"];
    source = connection["src"];
    if (!target && !source) {
      continue;
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

findPorts = function(connections, processKey) {
  var connection, result, _i, _len;
  result = [];
  for (_i = 0, _len = connections.length; _i < _len; _i++) {
    connection = connections[_i];
    if (connection.tgt) {
      if (connection.tgt.process === processKey) {
        result.push({
          type: "INPORT",
          name: connection.tgt.port,
          port: connection.tgt,
          connection: connection
        });
      }
    }
    if (connection.src) {
      if (connection.src.process === processKey) {
        result.push({
          type: "OUTPORT",
          name: connection.src.port,
          port: connection.src,
          connection: connection
        });
      }
    }
  }
  return result;
};

module.exports = {
  createFromSchema: createFromSchema
};

//# sourceMappingURL=data:application/json;base64,