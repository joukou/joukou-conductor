var SystemDUnitFile, checkForBrokenConnections, createFile, createOptions, findPorts, generateConnectionKeys, _;

SystemDUnitFile = require("../systemd/unit-file");

_ = require("lodash");

({
  createFromSchema: function(input, machineID, joukouMessageQueAddress, joukouApiAddress) {
    var connections, name, processes;
    if (!_.isPlainObject(input)) {
      throw new TypeError("input is not an object");
    }
    if (!machineID) {
      throw new Error("machineID is required");
    }
    if (typeof machineID !== "string") {
      throw new TypeError("machineID is not a string");
    }
    if (!_.isPlainObject(input.properties)) {
      throw new TypeError("input.properties is not an object");
    }
    if (!_.isPlainObject(input.processes)) {
      throw new TypeError("input.processes is not an object");
    }
    if (!_.isArray(input.connections)) {
      throw new TypeError("input.connections is not an array");
    }
    name = input.properties.name;
    if (!name) {
      throw new Error("input.properties.name is required");
    }
    connections = _.cloneDeep(input.connections);
    checkForBrokenConnections(connections);
    processes = _.cloneDeep(input.processes);
    return createOptions(name, processes, connections);
  }
});

createOptions = function(name, processes, connections, machineID, joukouMessageQueAddress, joukouApiAddress) {
  var file, options, process, processKey, unit, _i, _len, _ref;
  options = [];

  /*
  use format
  [
    {
      unitName: "name"
      options: [SystemDUnitFile].options
      machineID: machineID
    }
  ]
   */
  _ref = input.processes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    processKey = _ref[_i];
    if (!input.hasOwnProperty(processKey)) {
      continue;
    }
    process = input.processes[processKey];
    unit = {
      process: process,
      processKey: processKey,
      machineID: machineID,
      dockerContainer: process.component,
      ports: this.findPorts(connections, processKey)
    };
    generateConnectionKeys(unit.ports);
    file = createFile(unit, joukouMessageQueAddress, joukouApiAddress);
    options.push({
      unitName: processKey,
      options: file.options,
      machineID: machineID
    });
  }
  return options;
};

createFile = function(unit, joukouMessageQueAddress, joukouApiAddress) {
  var file, key, port, _i, _len, _ref;
  file = new SystemDUnitFile();
  file.service.addEnvironment("JOUKOU_AMQP_ADDR", joukouMessageQueAddress);
  file.service.addEnvironment("JOUKOU_API_ADDR", joukouApiAddress);
  _ref = unit.ports;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    port = _ref[_i];
    key = "JOUKOU_CIRCLE_" + port.type + "_" + port.name + "_";
    file.service.addEnvironment("" + key + "EXCHANGE", port.port.exchangeKey);
    file.service.addEnvironment("" + key + "ROUTING_KEY", port.port.routingKey);
  }
  return file;
};

generateConnectionKeys = function(ports) {
  var port, portObject, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = ports.length; _i < _len; _i++) {
    portObject = ports[_i];
    port = portObject.port;
    if (!port.exchangeKey) {
      port.exchangeKey = "FAKE_EXCHANGE";
      _results.push(port.routingKey = "FAKE_ROUTING");
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

checkForBrokenConnections = function(connections) {
  var connection, i, source, target, _results;
  i = 0;
  _results = [];
  while (i < connections.length) {
    i++;
    connection = connections[i];
    if (!_.isPlainObject(connection)) {
      continue;
    }
    target = connection["tgt"];
    source = connection["src"];
    if (!target && !source) {
      continue;
    }
    if (!_.isPlainObject(target)) {
      throw new Error("No target for connection " + i);
    }
    if (!_.isPlainObject(source)) {
      throw new Error("No source for connection " + i);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

findPorts = function(connections, processKey) {
  var connection, result, _i, _len;
  result = [];
  for (_i = 0, _len = connections.length; _i < _len; _i++) {
    connection = connections[_i];
    if (connection.tgt.process === processKey) {
      result.push({
        type: "INPORT",
        name: connection.tgt.port,
        port: connection.tgt,
        connection: connection
      });
    }
    if (connection.src.process === processKey) {
      result.push({
        type: "OUTPORT",
        name: connection.src.port,
        port: connection.src,
        connection: connection
      });
    }
  }
  return result;
};

module.exports = {
  createFromSchema: createFromSchema
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZmxvL3N5c3RlbWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsMkdBQUE7O0FBQUEsZUFBQSxHQUFrQixPQUFBLENBQVEsc0JBQVIsQ0FBbEIsQ0FBQTs7QUFBQSxDQUNBLEdBQWtCLE9BQUEsQ0FBUSxRQUFSLENBRGxCLENBQUE7O0FBQUEsQ0FHQTtBQUFBLEVBQUEsZ0JBQUEsRUFBa0IsU0FBQyxLQUFELEVBQ0MsU0FERCxFQUVDLHVCQUZELEVBR0MsZ0JBSEQsR0FBQTtBQUloQixRQUFBLDRCQUFBO0FBQUEsSUFBQSxJQUFHLENBQUEsQ0FBSyxDQUFDLGFBQUYsQ0FBZ0IsS0FBaEIsQ0FBUDtBQUNFLFlBQVUsSUFBQSxTQUFBLENBQVUsd0JBQVYsQ0FBVixDQURGO0tBQUE7QUFFQSxJQUFBLElBQUcsQ0FBQSxTQUFIO0FBQ0UsWUFBVSxJQUFBLEtBQUEsQ0FBTSx1QkFBTixDQUFWLENBREY7S0FGQTtBQUlBLElBQUEsSUFBRyxNQUFBLENBQUEsU0FBQSxLQUFzQixRQUF6QjtBQUNFLFlBQVUsSUFBQSxTQUFBLENBQVUsMkJBQVYsQ0FBVixDQURGO0tBSkE7QUFNQSxJQUFBLElBQUcsQ0FBQSxDQUFLLENBQUMsYUFBRixDQUFnQixLQUFLLENBQUMsVUFBdEIsQ0FBUDtBQUNFLFlBQVUsSUFBQSxTQUFBLENBQVUsbUNBQVYsQ0FBVixDQURGO0tBTkE7QUFRQSxJQUFBLElBQUcsQ0FBQSxDQUFLLENBQUMsYUFBRixDQUFnQixLQUFLLENBQUMsU0FBdEIsQ0FBUDtBQUNFLFlBQVUsSUFBQSxTQUFBLENBQVUsa0NBQVYsQ0FBVixDQURGO0tBUkE7QUFVQSxJQUFBLElBQUcsQ0FBQSxDQUFLLENBQUMsT0FBRixDQUFVLEtBQUssQ0FBQyxXQUFoQixDQUFQO0FBQ0UsWUFBVSxJQUFBLFNBQUEsQ0FBVSxtQ0FBVixDQUFWLENBREY7S0FWQTtBQUFBLElBWUEsSUFBQSxHQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFaeEIsQ0FB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QUE7NEJBQUE7S0FYRjtFQUFBLENBQUE7a0JBRjBCO0FBQUEsQ0E3RjVCLENBQUE7O0FBQUEsU0E2R0EsR0FBWSxTQUFDLFdBQUQsRUFBYyxVQUFkLEdBQUE7QUFDVixNQUFBLDRCQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsRUFBVCxDQUFBO0FBQ0EsT0FBQSxrREFBQTtpQ0FBQTtBQUNFLElBQUEsSUFBRyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQWYsS0FBMEIsVUFBN0I7QUFDRSxNQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVk7QUFBQSxRQUNWLElBQUEsRUFBTSxRQURJO0FBQUEsUUFFVixJQUFBLEVBQU0sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUZYO0FBQUEsUUFHVixJQUFBLEVBQU0sVUFBVSxDQUFDLEdBSFA7QUFBQSxRQUlWLFVBQUEsRUFBWSxVQUpGO09BQVosQ0FBQSxDQURGO0tBQUE7QUFPQSxJQUFBLElBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFmLEtBQTBCLFVBQTdCO0FBQ0UsTUFBQSxNQUFNLENBQUMsSUFBUCxDQUFZO0FBQUEsUUFDVixJQUFBLEVBQU0sU0FESTtBQUFBLFFBRVYsSUFBQSxFQUFNLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFGWDtBQUFBLFFBR1YsSUFBQSxFQUFNLFVBQVUsQ0FBQyxHQUhQO0FBQUEsUUFJVixVQUFBLEVBQVksVUFKRjtPQUFaLENBQUEsQ0FERjtLQVJGO0FBQUEsR0FEQTtTQWdCQSxPQWpCVTtBQUFBLENBN0daLENBQUE7O0FBQUEsTUFnSU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxFQUFBLGdCQUFBLEVBQWtCLGdCQUFsQjtDQWpJRixDQUFBIiwiZmlsZSI6Im5vZmxvL3N5c3RlbWQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJTeXN0ZW1EVW5pdEZpbGUgPSByZXF1aXJlKFwiLi4vc3lzdGVtZC91bml0LWZpbGVcIilcbl8gICAgICAgICAgICAgICA9IHJlcXVpcmUoXCJsb2Rhc2hcIilcblxuY3JlYXRlRnJvbVNjaGVtYTogKGlucHV0LFxuICAgICAgICAgICAgICAgICAgIG1hY2hpbmVJRCxcbiAgICAgICAgICAgICAgICAgICBqb3Vrb3VNZXNzYWdlUXVlQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICBqb3Vrb3VBcGlBZGRyZXNzKSAtPlxuICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KGlucHV0KVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbnB1dCBpcyBub3QgYW4gb2JqZWN0XCIpXG4gIGlmIG5vdCBtYWNoaW5lSURcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtYWNoaW5lSUQgaXMgcmVxdWlyZWRcIilcbiAgaWYgdHlwZW9mIG1hY2hpbmVJRCBpc250IFwic3RyaW5nXCJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibWFjaGluZUlEIGlzIG5vdCBhIHN0cmluZ1wiKVxuICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KGlucHV0LnByb3BlcnRpZXMpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImlucHV0LnByb3BlcnRpZXMgaXMgbm90IGFuIG9iamVjdFwiKVxuICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KGlucHV0LnByb2Nlc3NlcylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW5wdXQucHJvY2Vzc2VzIGlzIG5vdCBhbiBvYmplY3RcIilcbiAgaWYgbm90IF8uaXNBcnJheShpbnB1dC5jb25uZWN0aW9ucylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaW5wdXQuY29ubmVjdGlvbnMgaXMgbm90IGFuIGFycmF5XCIpXG4gIG5hbWUgPSBpbnB1dC5wcm9wZXJ0aWVzLm5hbWVcbiAgaWYgbm90IG5hbWVcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnB1dC5wcm9wZXJ0aWVzLm5hbWUgaXMgcmVxdWlyZWRcIilcbiAgY29ubmVjdGlvbnMgPSBfLmNsb25lRGVlcChpbnB1dC5jb25uZWN0aW9ucylcbiAgY2hlY2tGb3JCcm9rZW5Db25uZWN0aW9ucyhjb25uZWN0aW9ucylcbiAgcHJvY2Vzc2VzID0gXy5jbG9uZURlZXAoaW5wdXQucHJvY2Vzc2VzKVxuICByZXR1cm4gY3JlYXRlT3B0aW9ucyhuYW1lLCBwcm9jZXNzZXMsIGNvbm5lY3Rpb25zKVxuXG5jcmVhdGVPcHRpb25zID0gKG5hbWUsXG4gICAgICAgICAgICAgICAgIHByb2Nlc3NlcyxcbiAgICAgICAgICAgICAgICAgY29ubmVjdGlvbnMsXG4gICAgICAgICAgICAgICAgIG1hY2hpbmVJRCxcbiAgICAgICAgICAgICAgICAgam91a291TWVzc2FnZVF1ZUFkZHJlc3MsXG4gICAgICAgICAgICAgICAgIGpvdWtvdUFwaUFkZHJlc3MpIC0+XG4gIG9wdGlvbnMgPSBbXVxuICAjIyNcbiAgdXNlIGZvcm1hdFxuICBbXG4gICAge1xuICAgICAgdW5pdE5hbWU6IFwibmFtZVwiXG4gICAgICBvcHRpb25zOiBbU3lzdGVtRFVuaXRGaWxlXS5vcHRpb25zXG4gICAgICBtYWNoaW5lSUQ6IG1hY2hpbmVJRFxuICAgIH1cbiAgXVxuICAjIyNcbiAgZm9yIHByb2Nlc3NLZXkgaW4gaW5wdXQucHJvY2Vzc2VzXG4gICAgaWYgbm90IGlucHV0Lmhhc093blByb3BlcnR5KHByb2Nlc3NLZXkpXG4gICAgICBjb250aW51ZVxuICAgIHByb2Nlc3MgPSBpbnB1dC5wcm9jZXNzZXNbcHJvY2Vzc0tleV1cbiAgICB1bml0ID0ge1xuICAgICAgcHJvY2VzczogcHJvY2Vzc1xuICAgICAgcHJvY2Vzc0tleTogcHJvY2Vzc0tleVxuICAgICAgbWFjaGluZUlEOiBtYWNoaW5lSURcbiAgICAgIGRvY2tlckNvbnRhaW5lcjogcHJvY2Vzcy5jb21wb25lbnRcbiAgICAgIHBvcnRzOiB0aGlzLmZpbmRQb3J0cyhjb25uZWN0aW9ucywgcHJvY2Vzc0tleSlcbiAgICB9XG4gICAgZ2VuZXJhdGVDb25uZWN0aW9uS2V5cyh1bml0LnBvcnRzKVxuICAgIGZpbGUgPSBjcmVhdGVGaWxlKFxuICAgICAgdW5pdCxcbiAgICAgIGpvdWtvdU1lc3NhZ2VRdWVBZGRyZXNzLFxuICAgICAgam91a291QXBpQWRkcmVzc1xuICAgIClcbiAgICBvcHRpb25zLnB1c2goe1xuICAgICAgdW5pdE5hbWU6IHByb2Nlc3NLZXlcbiAgICAgIG9wdGlvbnM6IGZpbGUub3B0aW9uc1xuICAgICAgbWFjaGluZUlEOiBtYWNoaW5lSURcbiAgICB9KVxuXG4gIHJldHVybiBvcHRpb25zXG5cbmNyZWF0ZUZpbGUgPSAodW5pdCxcbiAgICAgICAgICAgICAgam91a291TWVzc2FnZVF1ZUFkZHJlc3MsXG4gICAgICAgICAgICAgIGpvdWtvdUFwaUFkZHJlc3MpIC0+XG5cbiAgZmlsZSA9IG5ldyBTeXN0ZW1EVW5pdEZpbGUoKVxuICBmaWxlLnNlcnZpY2UuYWRkRW52aXJvbm1lbnQoXCJKT1VLT1VfQU1RUF9BRERSXCIsIGpvdWtvdU1lc3NhZ2VRdWVBZGRyZXNzKVxuICBmaWxlLnNlcnZpY2UuYWRkRW52aXJvbm1lbnQoXCJKT1VLT1VfQVBJX0FERFJcIiwgam91a291QXBpQWRkcmVzcylcblxuICBmb3IgcG9ydCBpbiB1bml0LnBvcnRzXG4gICAga2V5ID0gXCJKT1VLT1VfQ0lSQ0xFXyN7cG9ydC50eXBlfV8je3BvcnQubmFtZX1fXCJcbiAgICBmaWxlLnNlcnZpY2UuYWRkRW52aXJvbm1lbnQoXCIje2tleX1FWENIQU5HRVwiLCBwb3J0LnBvcnQuZXhjaGFuZ2VLZXkpXG4gICAgZmlsZS5zZXJ2aWNlLmFkZEVudmlyb25tZW50KFwiI3trZXl9Uk9VVElOR19LRVlcIiwgcG9ydC5wb3J0LnJvdXRpbmdLZXkpXG5cbiAgcmV0dXJuIGZpbGVcblxuZ2VuZXJhdGVDb25uZWN0aW9uS2V5cyA9IChwb3J0cykgLT5cbiAgIyBOb3QgdG8gc3VyZSB3aGF0IElzYWFjIHdhbnRzIHRvIGJlXG4gICMgZG9uZSBoZXJlLCBhZGQgZmFrZXMgZm9yIG5vd1xuICBmb3IgcG9ydE9iamVjdCBpbiBwb3J0c1xuICAgIHBvcnQgPSBwb3J0T2JqZWN0LnBvcnRcbiAgICBpZiBub3QgcG9ydC5leGNoYW5nZUtleVxuICAgICAgcG9ydC5leGNoYW5nZUtleSA9IFwiRkFLRV9FWENIQU5HRVwiXG4gICAgICBwb3J0LnJvdXRpbmdLZXkgPSBcIkZBS0VfUk9VVElOR1wiXG5cbmNoZWNrRm9yQnJva2VuQ29ubmVjdGlvbnMgPSAoY29ubmVjdGlvbnMpIC0+XG4gIGkgPSAwXG4gIHdoaWxlIGkgPCBjb25uZWN0aW9ucy5sZW5ndGhcbiAgICBpKytcbiAgICBjb25uZWN0aW9uID0gY29ubmVjdGlvbnNbaV1cbiAgICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KGNvbm5lY3Rpb24pXG4gICAgICBjb250aW51ZVxuICAgIHRhcmdldCA9IGNvbm5lY3Rpb25bXCJ0Z3RcIl1cbiAgICBzb3VyY2UgPSBjb25uZWN0aW9uW1wic3JjXCJdXG4gICAgaWYgbm90IHRhcmdldCBhbmQgbm90IHNvdXJjZVxuICAgICAgY29udGludWVcbiAgICBpZiBub3QgXy5pc1BsYWluT2JqZWN0KHRhcmdldClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHRhcmdldCBmb3IgY29ubmVjdGlvbiAje2l9XCIpXG4gICAgaWYgbm90IF8uaXNQbGFpbk9iamVjdChzb3VyY2UpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzb3VyY2UgZm9yIGNvbm5lY3Rpb24gI3tpfVwiKVxuXG5maW5kUG9ydHMgPSAoY29ubmVjdGlvbnMsIHByb2Nlc3NLZXkpIC0+XG4gIHJlc3VsdCA9IFtdXG4gIGZvciBjb25uZWN0aW9uIGluIGNvbm5lY3Rpb25zXG4gICAgaWYgY29ubmVjdGlvbi50Z3QucHJvY2VzcyBpcyBwcm9jZXNzS2V5XG4gICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgIHR5cGU6IFwiSU5QT1JUXCJcbiAgICAgICAgbmFtZTogY29ubmVjdGlvbi50Z3QucG9ydFxuICAgICAgICBwb3J0OiBjb25uZWN0aW9uLnRndFxuICAgICAgICBjb25uZWN0aW9uOiBjb25uZWN0aW9uXG4gICAgICB9KVxuICAgIGlmIGNvbm5lY3Rpb24uc3JjLnByb2Nlc3MgaXMgcHJvY2Vzc0tleVxuICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICB0eXBlOiBcIk9VVFBPUlRcIlxuICAgICAgICBuYW1lOiBjb25uZWN0aW9uLnNyYy5wb3J0XG4gICAgICAgIHBvcnQ6IGNvbm5lY3Rpb24uc3JjXG4gICAgICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb25cbiAgICAgIH0pXG4gIHJlc3VsdFxuXG5tb2R1bGUuZXhwb3J0cyA9XG4gIGNyZWF0ZUZyb21TY2hlbWE6IGNyZWF0ZUZyb21TY2hlbWEiXX0=