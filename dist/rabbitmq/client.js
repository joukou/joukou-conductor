var Q, RabbitMQClient, amqplib, uuid;

amqplib = require('amqplib');

Q = require('q');

uuid = require('node-uuid');

RabbitMQClient = (function() {
  RabbitMQClient.prototype._channelDeferred = null;

  RabbitMQClient.prototype.connection = null;

  RabbitMQClient.prototype.channel = null;

  RabbitMQClient.prototype.key = null;

  RabbitMQClient.prototype.exchange = null;

  RabbitMQClient.prototype.consumer = null;

  RabbitMQClient.prototype.on = {
    connection: null,
    channel: null
  };

  function RabbitMQClient(exchange, key) {
    this.exchange = exchange;
    this.key = key;
    this._channelDeferred = Q.defer();
    this.on = {
      connection: amqplib.connect(exchange),
      channel: this._channelDeferred.promise
    };
    this._setupConnection();
  }

  RabbitMQClient.prototype._setupConnection = function() {
    var client;
    client = this;
    return this.on.connection.then(function() {
      return client._onConnection.apply(client, arguments);
    });
  };

  RabbitMQClient.prototype._onConnection = function(connection) {
    this.connection = connection;
    return this._setupChannel();
  };

  RabbitMQClient.prototype._setupChannel = function() {
    var client, ok;
    client = this;
    ok = this.connection.createChannel();
    return ok.then(function() {
      return client._onChannel.apply(client, arguments);
    });
  };

  RabbitMQClient.prototype._onChannel = function(channel) {
    this.channel = channel;
    return this._channelDeferred.resolve(this);
  };

  RabbitMQClient.prototype.cancel = function(consumerTag) {
    if (!this.channel) {
      return Q.reject(new Error("Not connected"));
    }
    return this.channel.cancel(consumerTag);
  };

  RabbitMQClient.prototype.consume = function(callback, contentOnly, consumerTag) {
    var client;
    if (!(callback instanceof Function)) {
      throw new TypeError("Callback is expected to be a Function");
    }
    if (!consumerTag) {
      consumerTag = uuid.v4();
    }
    client = this;
    this.on.channel.then(function() {
      client.channel.assertQueue(client.key);
      return client.channel.consume(client.key, function(message) {
        if (message === null || message === void 0) {
          return;
        }
        if (contentOnly) {
          message = message.content;
        }
        if (message === null || message === void 0) {
          return;
        }
        return callback(message);
      }, {
        consumerTag: consumerTag
      });
    });
    return consumerTag;
  };

  RabbitMQClient.prototype.send = function(message) {
    var client;
    if (!(message instanceof Buffer)) {
      message = new Buffer(message);
    }
    client = this;
    return this.on.channel.then(function() {
      client.channel.assertQueue(client.key);
      return client.channel.sendToQueue(client.key, message);
    });
  };

  return RabbitMQClient;

})();

module.exports = {
  getClient: function(exchange, key) {
    return new RabbitMQClient(exchange, key);
  },
  RabbitMQClient: RabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhYmJpdG1xL2NsaWVudC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxnQ0FBQTs7QUFBQSxPQUFBLEdBQVUsT0FBQSxDQUFRLFNBQVIsQ0FBVixDQUFBOztBQUFBLENBQ0EsR0FBVSxPQUFBLENBQVEsR0FBUixDQURWLENBQUE7O0FBQUEsSUFFQSxHQUFVLE9BQUEsQ0FBUSxXQUFSLENBRlYsQ0FBQTs7QUFBQTtBQUtFLDJCQUFBLGdCQUFBLEdBQWtCLElBQWxCLENBQUE7O0FBQUEsMkJBQ0EsVUFBQSxHQUFZLElBRFosQ0FBQTs7QUFBQSwyQkFFQSxPQUFBLEdBQVMsSUFGVCxDQUFBOztBQUFBLDJCQUdBLEdBQUEsR0FBSyxJQUhMLENBQUE7O0FBQUEsMkJBSUEsUUFBQSxHQUFVLElBSlYsQ0FBQTs7QUFBQSwyQkFLQSxRQUFBLEdBQVUsSUFMVixDQUFBOztBQUFBLDJCQU1BLEVBQUEsR0FDRTtBQUFBLElBQUEsVUFBQSxFQUFZLElBQVo7QUFBQSxJQUNBLE9BQUEsRUFBUyxJQURUO0dBUEYsQ0FBQTs7QUFTYSxFQUFBLHdCQUFDLFFBQUQsRUFBVyxHQUFYLEdBQUE7QUFDWCxJQUFBLElBQUksQ0FBQyxRQUFMLEdBQWdCLFFBQWhCLENBQUE7QUFBQSxJQUNBLElBQUksQ0FBQyxHQUFMLEdBQVcsR0FEWCxDQUFBO0FBQUEsSUFFQSxJQUFJLENBQUMsZ0JBQUwsR0FBd0IsQ0FBQyxDQUFDLEtBQUYsQ0FBQSxDQUZ4QixDQUFBO0FBQUEsSUFHQSxJQUFJLENBQUMsRUFBTCxHQUNFO0FBQUEsTUFBQSxVQUFBLEVBQVksT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsUUFBaEIsQ0FBWjtBQUFBLE1BQ0EsT0FBQSxFQUFTLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUQvQjtLQUpGLENBQUE7QUFBQSxJQU1BLElBQUksQ0FBQyxnQkFBTCxDQUFBLENBTkEsQ0FEVztFQUFBLENBVGI7O0FBQUEsMkJBaUJBLGdCQUFBLEdBQWtCLFNBQUEsR0FB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O0FBQ0osUUFBQSxNQUFBO0FBQUEsSUFBQSxJQUFHLENBQUEsQ0FBQSxPQUFBLFlBQXVCLE1BQXZCLENBQUg7QUFDRSxNQUFBLE9BQUEsR0FBYyxJQUFBLE1BQUEsQ0FBTyxPQUFQLENBQWQsQ0FERjtLQUFBO0FBQUEsSUFFQSxNQUFBLEdBQVMsSUFGVCxDQUFBO1dBR0EsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBaEIsQ0FBc0IsU0FBQSxHQUFBO0FBQ3BCLE1BQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFmLENBQTJCLE1BQU0sQ0FBQyxHQUFsQyxDQUFBLENBQUE7YUFDQSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQWYsQ0FBMkIsTUFBTSxDQUFDLEdBQWxDLEVBQXVDLE9BQXZDLEVBRm9CO0lBQUEsQ0FBdEIsRUFKSTtFQUFBLENBN0ROLENBQUE7O3dCQUFBOztJQUxGLENBQUE7O0FBQUEsTUEwRU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxFQUFBLFNBQUEsRUFBVyxTQUFDLFFBQUQsRUFBVyxHQUFYLEdBQUE7QUFDVCxXQUFXLElBQUEsY0FBQSxDQUFlLFFBQWYsRUFBeUIsR0FBekIsQ0FBWCxDQURTO0VBQUEsQ0FBWDtBQUFBLEVBRUEsY0FBQSxFQUFnQixjQUZoQjtDQTNFRixDQUFBIiwiZmlsZSI6InJhYmJpdG1xL2NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFtcXBsaWIgPSByZXF1aXJlKCdhbXFwbGliJylcblEgICAgICAgPSByZXF1aXJlKCdxJylcbnV1aWQgICAgPSByZXF1aXJlKCdub2RlLXV1aWQnKVxuXG5jbGFzcyBSYWJiaXRNUUNsaWVudFxuICBfY2hhbm5lbERlZmVycmVkOiBudWxsXG4gIGNvbm5lY3Rpb246IG51bGxcbiAgY2hhbm5lbDogbnVsbFxuICBrZXk6IG51bGxcbiAgZXhjaGFuZ2U6IG51bGxcbiAgY29uc3VtZXI6IG51bGxcbiAgb246XG4gICAgY29ubmVjdGlvbjogbnVsbFxuICAgIGNoYW5uZWw6IG51bGxcbiAgY29uc3RydWN0b3I6IChleGNoYW5nZSwga2V5KSAtPlxuICAgIHRoaXMuZXhjaGFuZ2UgPSBleGNoYW5nZVxuICAgIHRoaXMua2V5ID0ga2V5XG4gICAgdGhpcy5fY2hhbm5lbERlZmVycmVkID0gUS5kZWZlcigpXG4gICAgdGhpcy5vbiA9XG4gICAgICBjb25uZWN0aW9uOiBhbXFwbGliLmNvbm5lY3QoZXhjaGFuZ2UpXG4gICAgICBjaGFubmVsOiB0aGlzLl9jaGFubmVsRGVmZXJyZWQucHJvbWlzZVxuICAgIHRoaXMuX3NldHVwQ29ubmVjdGlvbigpXG4gIF9zZXR1cENvbm5lY3Rpb246IC0+XG4gICAgY2xpZW50ID0gdGhpc1xuICAgIHRoaXMub24uY29ubmVjdGlvbi50aGVuKCAtPlxuICAgICAgY2xpZW50Ll9vbkNvbm5lY3Rpb24uYXBwbHkoY2xpZW50LCBhcmd1bWVudHMpXG4gICAgKVxuICBfb25Db25uZWN0aW9uOiAoY29ubmVjdGlvbikgLT5cbiAgICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uXG4gICAgdGhpcy5fc2V0dXBDaGFubmVsKClcbiAgX3NldHVwQ2hhbm5lbDogLT5cbiAgICBjbGllbnQgPSB0aGlzXG4gICAgb2sgPSB0aGlzLmNvbm5lY3Rpb24uY3JlYXRlQ2hhbm5lbCgpXG4gICAgb2sudGhlbiggLT5cbiAgICAgIGNsaWVudC5fb25DaGFubmVsLmFwcGx5KGNsaWVudCwgYXJndW1lbnRzKVxuICAgIClcbiAgX29uQ2hhbm5lbDogKGNoYW5uZWwpIC0+XG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuX2NoYW5uZWxEZWZlcnJlZC5yZXNvbHZlKHRoaXMpXG4gIGNhbmNlbDogKGNvbnN1bWVyVGFnKSAtPlxuICAgICMgTm90IGNvbm5lY3RlZFxuICAgIGlmIG5vdCB0aGlzLmNoYW5uZWxcbiAgICAgIHJldHVybiBRLnJlamVjdChuZXcgRXJyb3IoXCJOb3QgY29ubmVjdGVkXCIpKVxuICAgIHRoaXMuY2hhbm5lbC5jYW5jZWwoY29uc3VtZXJUYWcpXG4gIGNvbnN1bWU6IChjYWxsYmFjaywgY29udGVudE9ubHksIGNvbnN1bWVyVGFnKSAtPlxuICAgIGlmIGNhbGxiYWNrIG5vdCBpbnN0YW5jZW9mIEZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG8gYmUgYSBGdW5jdGlvblwiKVxuICAgIGlmIG5vdCBjb25zdW1lclRhZ1xuICAgICAgIyBDcmVhdGUgb25lIHNvIHRoZXkgY2FuIGNhbmNlbCBpdFxuICAgICAgY29uc3VtZXJUYWcgPSB1dWlkLnY0KClcbiAgICBjbGllbnQgPSB0aGlzXG4gICAgdGhpcy5vbi5jaGFubmVsLnRoZW4oLT5cbiAgICAgIGNsaWVudC5jaGFubmVsLmFzc2VydFF1ZXVlKGNsaWVudC5rZXkpXG4gICAgICBjbGllbnQuY2hhbm5lbC5jb25zdW1lKGNsaWVudC5rZXksIChtZXNzYWdlKSAtPlxuICAgICAgICAjIEZpbHRlciB0aGUgZHVkcyBoZXJlXG4gICAgICAgIGlmIG1lc3NhZ2UgaXMgbnVsbCBvciBtZXNzYWdlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIHJldHVyblxuICAgICAgICBpZiBjb250ZW50T25seVxuICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLmNvbnRlbnRcbiAgICAgICAgIyBDaGVjayBhZ2FpblxuICAgICAgICBpZiBtZXNzYWdlIGlzIG51bGwgb3IgbWVzc2FnZSBpcyB1bmRlZmluZWRcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZSlcbiAgICAgICwgY29uc3VtZXJUYWc6IGNvbnN1bWVyVGFnKVxuICAgIClcbiAgICBjb25zdW1lclRhZ1xuICBzZW5kOiAobWVzc2FnZSkgLT5cbiAgICBpZiBtZXNzYWdlIG5vdCBpbnN0YW5jZW9mIEJ1ZmZlclxuICAgICAgbWVzc2FnZSA9IG5ldyBCdWZmZXIobWVzc2FnZSlcbiAgICBjbGllbnQgPSB0aGlzXG4gICAgdGhpcy5vbi5jaGFubmVsLnRoZW4oIC0+XG4gICAgICBjbGllbnQuY2hhbm5lbC5hc3NlcnRRdWV1ZShjbGllbnQua2V5KVxuICAgICAgY2xpZW50LmNoYW5uZWwuc2VuZFRvUXVldWUoY2xpZW50LmtleSwgbWVzc2FnZSlcbiAgICApXG5tb2R1bGUuZXhwb3J0cyA9XG4gIGdldENsaWVudDogKGV4Y2hhbmdlLCBrZXkpIC0+XG4gICAgcmV0dXJuIG5ldyBSYWJiaXRNUUNsaWVudChleGNoYW5nZSwga2V5KVxuICBSYWJiaXRNUUNsaWVudDogUmFiYml0TVFDbGllbnQiXX0=