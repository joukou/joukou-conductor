var ConductorRabbitMQClient, JoukouConductorExchange, JoukouConductorRoutingKey, JoukouFleetAPIHost, JoukouFleetAPIPath, RabbitMQClient, fleet, noflo, request,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

JoukouConductorExchange = process.env["JOUKOU_CONDUCTOR_EXCHANGE"];

JoukouConductorRoutingKey = process.env["JOUKOU_CONDUCTOR_ROUTING_KEY"];

JoukouFleetAPIHost = process.env["JOUKOU_FLEET_API_HOST"];

JoukouFleetAPIPath = process.env["JOUKOU_FLEET_API_PATH"];

RabbitMQClient = require('./client').RabbitMQClient;

request = require('request');

fleet = require('../fleet');

noflo = require('../noflo/systemd');

if (!JoukouConductorExchange) {
  JoukouConductorExchange = "amqp://localhost";
  process.env["JOUKOU_CONDUCTOR_EXCHANGE"] = JoukouConductorExchange;
}

if (!JoukouConductorRoutingKey) {
  JoukouConductorRoutingKey = "CONDUCTOR";
  process.env["JOUKOU_CONDUCTOR_ROUTING_KEY"] = JoukouConductorRoutingKey;
}

if (!JoukouFleetAPIHost) {
  JoukouFleetAPIHost = "localhost:4002";
  process.env["JOUKOU_FLEET_API_HOST"] = JoukouFleetAPIHost;
}

if (!JoukouFleetAPIPath) {
  JoukouFleetAPIPath = "/v1-alpha/";
  process.env["JOUKOU_FLEET_API_PATH"] = JoukouFleetAPIPath;
}

ConductorRabbitMQClient = (function(_super) {
  __extends(ConductorRabbitMQClient, _super);

  ConductorRabbitMQClient.prototype.fleetClient = null;

  function ConductorRabbitMQClient() {
    var client;
    ConductorRabbitMQClient.__super__.constructor.call(this, JoukouConductorExchange, JoukouConductorRoutingKey);
    client = this;
    this.consume(function() {
      return client.onMessage.apply(client, arguments);
    }, true);
    this.fleetClient = fleet.getClient(JoukouFleetAPIHost, JoukouFleetAPIPath, true);
  }

  ConductorRabbitMQClient.prototype.onMessage = function(message) {
    if (!(message instanceof Object)) {
      return;
    }
    if (!(message["_links"] instanceof Object)) {
      return;
    }
    if (!(message["_links"]["joukou:graph"] instanceof Object)) {
      return;
    }
    if (!message["_links"]["joukou:graph"]["href"]) {
      return;
    }
    if (!message.desiredState) {
      return;
    }
    return this.onGraphHref(message["_links"]["joukou:graph"]["href"], message.desiredState, message.secret);
  };

  ConductorRabbitMQClient.prototype.onGraphHref = function(graphHref, desiredState, secret) {
    var client, options;
    options = null;
    if (secret) {
      options = {
        headers: {
          Authorization: "Bearer " + secret
        }
      };
    }
    client = this;
    return request.get(graphHref, options, function(error, response, body, desiredState) {
      return client.onGraphResponse.apply(client, [error, response, body, desiredState]);
    });
  };

  ConductorRabbitMQClient.prototype.onGraphResponse = function(error, response, body, desiredState) {
    var jsonBody;
    if (error || response.statusCode !== 200) {
      return;
    }
    jsonBody = null;
    try {
      jsonBody = JSON.parse(body);
    } catch (_error) {}
    if (!jsonBody) {
      return;
    }
    try {
      return this.onGraphBody(jsonBody, desiredState);
    } catch (_error) {}
  };

  ConductorRabbitMQClient.prototype.onGraphBody = function(body, desiredState) {
    var client, options;
    options = noflo.createFromSchema(body, "TODO", "TODO", "TODO");

    /*
      unitName: "name"
      options: [SystemDUnitFile].options
      machineID: machineID
     */
    client = this.fleetClient;
    return client.createUnit(options.unitName, options.options, desiredState, null, options.machineID);
  };

  return ConductorRabbitMQClient;

})(RabbitMQClient);

module.exports = {
  listen: function() {
    return new ConductorRabbitMQClient();
  },
  ConductorRabbitMQClient: ConductorRabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,