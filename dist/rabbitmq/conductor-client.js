var ConductorRabbitMQClient, JoukouConductorExchange, JoukouConductorRoutingKey, RabbitMQClient, singleton,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

JoukouConductorExchange = process.env["JOUKOU_CONDUCTOR_EXCHANGE"];

JoukouConductorRoutingKey = process.env["JOUKOU_CONDUCTOR_ROUTING_KEY"];

RabbitMQClient = require('./client').RabbitMQClient;

if (!JoukouConductorExchange) {
  JoukouConductorExchange = "amqp://localhost";
  process.env["JOUKOU_CONDUCTOR_EXCHANGE"] = JoukouConductorExchange;
}

if (!JoukouConductorRoutingKey) {
  JoukouConductorRoutingKey = "CONDUCTOR";
  process.env["JOUKOU_CONDUCTOR_ROUTING_KEY"] = JoukouConductorRoutingKey;
}

ConductorRabbitMQClient = (function(_super) {
  __extends(ConductorRabbitMQClient, _super);

  function ConductorRabbitMQClient() {
    var client;
    ConductorRabbitMQClient.__super__.constructor.call(this, JoukouConductorExchange, JoukouConductorRoutingKey);
    client = this;
    this.consume(function() {
      return client._consume.apply(client, arguments);
    }, true);
  }

  ConductorRabbitMQClient.prototype._consume = function(message) {};

  return ConductorRabbitMQClient;

})(RabbitMQClient);

singleton = null;

module.exports = {
  listen: function() {
    return new ConductorRabbitMQClient();
  },
  ConductorRabbitMQClient: ConductorRabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhYmJpdG1xL2NvbmR1Y3Rvci1jbGllbnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsc0dBQUE7RUFBQTtpU0FBQTs7QUFBQSx1QkFBQSxHQUE0QixPQUFPLENBQUMsR0FBSSxDQUFBLDJCQUFBLENBQXhDLENBQUE7O0FBQUEseUJBQ0EsR0FBNEIsT0FBTyxDQUFDLEdBQUksQ0FBQSw4QkFBQSxDQUR4QyxDQUFBOztBQUFBLGNBRUEsR0FBNEIsT0FBQSxDQUFRLFVBQVIsQ0FBbUIsQ0FBQyxjQUZoRCxDQUFBOztBQU1BLElBQUcsQ0FBQSx1QkFBSDtBQUNFLEVBQUEsdUJBQUEsR0FBMEIsa0JBQTFCLENBQUE7QUFBQSxFQUNBLE9BQU8sQ0FBQyxHQUFJLENBQUEsMkJBQUEsQ0FBWixHQUEyQyx1QkFEM0MsQ0FERjtDQU5BOztBQVVBLElBQUcsQ0FBQSx5QkFBSDtBQUNFLEVBQUEseUJBQUEsR0FBNEIsV0FBNUIsQ0FBQTtBQUFBLEVBQ0EsT0FBTyxDQUFDLEdBQUksQ0FBQSw4QkFBQSxDQUFaLEdBQThDLHlCQUQ5QyxDQURGO0NBVkE7O0FBQUE7QUFlRSw0Q0FBQSxDQUFBOztBQUFhLEVBQUEsaUNBQUEsR0FBQTtBQUNYLFFBQUEsTUFBQTtBQUFBLElBQUEseURBQU0sdUJBQU4sRUFBK0IseUJBQS9CLENBQUEsQ0FBQTtBQUFBLElBQ0EsTUFBQSxHQUFTLElBRFQsQ0FBQTtBQUFBLElBRUEsSUFBSSxDQUFDLE9BQUwsQ0FBYyxTQUFBLEdBQUE7YUFDWixNQUFNLENBQUMsUUFBUSxDQUFDLEtBQWhCLENBQXNCLE1BQXRCLEVBQThCLFNBQTlCLEVBRFk7SUFBQSxDQUFkLEVBRUUsSUFGRixDQUZBLENBRFc7RUFBQSxDQUFiOztBQUFBLG9DQU1BLFFBQUEsR0FBVSxTQUFDLE9BQUQsR0FBQSxDQU5WLENBQUE7O2lDQUFBOztHQURvQyxlQWR0QyxDQUFBOztBQUFBLFNBdUJBLEdBQVksSUF2QlosQ0FBQTs7QUFBQSxNQXdCTSxDQUFDLE9BQVAsR0FDRTtBQUFBLEVBQUEsTUFBQSxFQUFRLFNBQUEsR0FBQTtXQUNGLElBQUEsdUJBQUEsQ0FBQSxFQURFO0VBQUEsQ0FBUjtBQUFBLEVBRUEsdUJBQUEsRUFBeUIsdUJBRnpCO0NBekJGLENBQUEiLCJmaWxlIjoicmFiYml0bXEvY29uZHVjdG9yLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkpvdWtvdUNvbmR1Y3RvckV4Y2hhbmdlICAgPSBwcm9jZXNzLmVudltcIkpPVUtPVV9DT05EVUNUT1JfRVhDSEFOR0VcIl1cbkpvdWtvdUNvbmR1Y3RvclJvdXRpbmdLZXkgPSBwcm9jZXNzLmVudltcIkpPVUtPVV9DT05EVUNUT1JfUk9VVElOR19LRVlcIl1cblJhYmJpdE1RQ2xpZW50ICAgICAgICAgICAgPSByZXF1aXJlKCcuL2NsaWVudCcpLlJhYmJpdE1RQ2xpZW50XG5cbiMgU2V0IHRoZSBFTlYgdmFyaWFibGUgZm9yIG5leHQgdGltZVxuIyBUaGlzIGRvZXMgbm90IGVmZmVjdCBnbG9iYWwgZW52IGp1c3QgdGhpcyBwcm9jZXNzXG5pZiBub3QgSm91a291Q29uZHVjdG9yRXhjaGFuZ2VcbiAgSm91a291Q29uZHVjdG9yRXhjaGFuZ2UgPSBcImFtcXA6Ly9sb2NhbGhvc3RcIlxuICBwcm9jZXNzLmVudltcIkpPVUtPVV9DT05EVUNUT1JfRVhDSEFOR0VcIl0gPSBKb3Vrb3VDb25kdWN0b3JFeGNoYW5nZVxuXG5pZiBub3QgSm91a291Q29uZHVjdG9yUm91dGluZ0tleVxuICBKb3Vrb3VDb25kdWN0b3JSb3V0aW5nS2V5ID0gXCJDT05EVUNUT1JcIlxuICBwcm9jZXNzLmVudltcIkpPVUtPVV9DT05EVUNUT1JfUk9VVElOR19LRVlcIl0gPSBKb3Vrb3VDb25kdWN0b3JSb3V0aW5nS2V5XG5cbmNsYXNzIENvbmR1Y3RvclJhYmJpdE1RQ2xpZW50IGV4dGVuZHMgUmFiYml0TVFDbGllbnRcbiAgY29uc3RydWN0b3I6IC0+XG4gICAgc3VwZXIoSm91a291Q29uZHVjdG9yRXhjaGFuZ2UsIEpvdWtvdUNvbmR1Y3RvclJvdXRpbmdLZXkpXG4gICAgY2xpZW50ID0gdGhpc1xuICAgIHRoaXMuY29uc3VtZSggLT5cbiAgICAgIGNsaWVudC5fY29uc3VtZS5hcHBseShjbGllbnQsIGFyZ3VtZW50cylcbiAgICAsIHRydWUpXG4gIF9jb25zdW1lOiAobWVzc2FnZSkgLT5cblxuc2luZ2xldG9uID0gbnVsbFxubW9kdWxlLmV4cG9ydHMgPVxuICBsaXN0ZW46IC0+XG4gICAgbmV3IENvbmR1Y3RvclJhYmJpdE1RQ2xpZW50KClcbiAgQ29uZHVjdG9yUmFiYml0TVFDbGllbnQ6IENvbmR1Y3RvclJhYmJpdE1RQ2xpZW50XG4iXX0=