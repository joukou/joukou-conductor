var Q, createExchange, onCreateExchangeResponse, request;

request = require('request');

Q = require('q');

createExchange = function(name, virtualHost, type, auto_delete, durable) {
  var deferred;
  if (typeof name !== 'string') {
    return Q.reject(new Error('Name is required to be a string'));
  }
  if (typeof virtualHost !== 'string') {
    virtualHost = "%2f";
  }
  if (typeof virtualHost !== 'string') {
    type = "direct";
  }
  if (typeof virtualHost !== 'boolean') {
    auto_delete = false;
  }
  if (typeof durable !== 'boolean') {
    durable = true;
  }
  deferred = Q.defer();
  request({
    json: true,
    method: "PUT",
    url: "",
    body: {
      type: type,
      auto_delete: auto_delete,
      durable: durable
    }
  }, function(error, response, body) {
    return onCreateExchangeResponse(error, response, body, deferred);
  });
  return deferred.promise;
};

onCreateExchangeResponse = function(error, response, body, deferred) {
  var err;
  if (!err && (response.statusCode < 200 || response.statusCode >= 300)) {
    err = new Error("Status code returned " + response.statusCode);
  }
  if (err) {
    deferred.reject(err);
    return;
  }
  return deferred.resolve();
};

module.exports = {
  createExchange: createExchange
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhYmJpdG1xL2h0dHAtY2xpZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLG9EQUFBOztBQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsU0FBUixDQUFWLENBQUE7O0FBQUEsQ0FDQSxHQUFVLE9BQUEsQ0FBUSxHQUFSLENBRFYsQ0FBQTs7QUFBQSxjQUdBLEdBQWlCLFNBQUMsSUFBRCxFQUNDLFdBREQsRUFFQyxJQUZELEVBR0MsV0FIRCxFQUlDLE9BSkQsR0FBQTtBQUtmLE1BQUEsUUFBQTtBQUFBLEVBQUEsSUFBRyxNQUFBLENBQUEsSUFBQSxLQUFpQixRQUFwQjtBQUNFLFdBQU8sQ0FBQyxDQUFDLE1BQUYsQ0FBYSxJQUFBLEtBQUEsQ0FBTSxpQ0FBTixDQUFiLENBQVAsQ0FERjtHQUFBO0FBRUEsRUFBQSxJQUFHLE1BQUEsQ0FBQSxXQUFBLEtBQXdCLFFBQTNCO0FBQ0UsSUFBQSxXQUFBLEdBQWMsS0FBZCxDQURGO0dBRkE7QUFJQSxFQUFBLElBQUcsTUFBQSxDQUFBLFdBQUEsS0FBd0IsUUFBM0I7QUFDRSxJQUFBLElBQUEsR0FBTyxRQUFQLENBREY7R0FKQTtBQU1BLEVBQUEsSUFBRyxNQUFBLENBQUEsV0FBQSxLQUF3QixTQUEzQjtBQUNFLElBQUEsV0FBQSxHQUFjLEtBQWQsQ0FERjtHQU5BO0FBUUEsRUFBQSxJQUFHLE1BQUEsQ0FBQSxPQUFBLEtBQW9CLFNBQXZCO0FBQ0UsSUFBQSxPQUFBLEdBQVUsSUFBVixDQURGO0dBUkE7QUFBQSxFQVVBLFFBQUEsR0FBVyxDQUFDLENBQUMsS0FBRixDQUFBLENBVlgsQ0FBQTtBQUFBLEVBV0EsT0FBQSxDQUNFO0FBQUEsSUFBQSxJQUFBLEVBQU0sSUFBTjtBQUFBLElBQ0EsTUFBQSxFQUFRLEtBRFI7QUFBQSxJQUVBLEdBQUEsRUFBSyxFQUZMO0FBQUEsSUFHQSxJQUFBLEVBQ0U7QUFBQSxNQUFBLElBQUEsRUFBTSxJQUFOO0FBQUEsTUFDQSxXQUFBLEVBQWEsV0FEYjtBQUFBLE1BRUEsT0FBQSxFQUFTLE9BRlQ7S0FKRjtHQURGLEVBUUUsU0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixJQUFsQixHQUFBO1dBQ0Esd0JBQUEsQ0FBeUIsS0FBekIsRUFBZ0MsUUFBaEMsRUFBMEMsSUFBMUMsRUFBZ0QsUUFBaEQsRUFEQTtFQUFBLENBUkYsQ0FYQSxDQUFBO1NBc0JBLFFBQVEsQ0FBQyxRQTNCTTtBQUFBLENBSGpCLENBQUE7O0FBQUEsd0JBK0JBLEdBQTJCLFNBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsSUFBbEIsRUFBd0IsUUFBeEIsR0FBQTtBQUN6QixNQUFBLEdBQUE7QUFBQSxFQUFBLElBQUcsQ0FBQSxHQUFBLElBQVksQ0FBQyxRQUFRLENBQUMsVUFBVCxHQUFzQixHQUF0QixJQUE2QixRQUFRLENBQUMsVUFBVCxJQUF1QixHQUFyRCxDQUFmO0FBQ0UsSUFBQSxHQUFBLEdBQVUsSUFBQSxLQUFBLENBQU8sdUJBQUEsR0FBdUIsUUFBUSxDQUFDLFVBQXZDLENBQVYsQ0FERjtHQUFBO0FBRUEsRUFBQSxJQUFHLEdBQUg7QUFDRSxJQUFBLFFBQVEsQ0FBQyxNQUFULENBQWdCLEdBQWhCLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FGRjtHQUZBO1NBS0EsUUFBUSxDQUFDLE9BQVQsQ0FBQSxFQU55QjtBQUFBLENBL0IzQixDQUFBOztBQUFBLE1BdUNNLENBQUMsT0FBUCxHQUNFO0FBQUEsRUFBQSxjQUFBLEVBQWdCLGNBQWhCO0NBeENGLENBQUEiLCJmaWxlIjoicmFiYml0bXEvaHR0cC1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1ZXN0ID0gcmVxdWlyZSgncmVxdWVzdCcpXG5RICAgICAgID0gcmVxdWlyZSgncScpXG5cbmNyZWF0ZUV4Y2hhbmdlID0gKG5hbWUsXG4gICAgICAgICAgICAgICAgICB2aXJ0dWFsSG9zdCxcbiAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICBhdXRvX2RlbGV0ZSxcbiAgICAgICAgICAgICAgICAgIGR1cmFibGUpIC0+XG4gIGlmIHR5cGVvZiBuYW1lIGlzbnQgJ3N0cmluZydcbiAgICByZXR1cm4gUS5yZWplY3QobmV3IEVycm9yKCdOYW1lIGlzIHJlcXVpcmVkIHRvIGJlIGEgc3RyaW5nJykpXG4gIGlmIHR5cGVvZiB2aXJ0dWFsSG9zdCBpc250ICdzdHJpbmcnXG4gICAgdmlydHVhbEhvc3QgPSBcIiUyZlwiXG4gIGlmIHR5cGVvZiB2aXJ0dWFsSG9zdCBpc250ICdzdHJpbmcnXG4gICAgdHlwZSA9IFwiZGlyZWN0XCJcbiAgaWYgdHlwZW9mIHZpcnR1YWxIb3N0IGlzbnQgJ2Jvb2xlYW4nXG4gICAgYXV0b19kZWxldGUgPSBub1xuICBpZiB0eXBlb2YgZHVyYWJsZSBpc250ICdib29sZWFuJ1xuICAgIGR1cmFibGUgPSB5ZXNcbiAgZGVmZXJyZWQgPSBRLmRlZmVyKClcbiAgcmVxdWVzdChcbiAgICBqc29uOiB5ZXNcbiAgICBtZXRob2Q6IFwiUFVUXCJcbiAgICB1cmw6IFwiXCJcbiAgICBib2R5OlxuICAgICAgdHlwZTogdHlwZVxuICAgICAgYXV0b19kZWxldGU6IGF1dG9fZGVsZXRlXG4gICAgICBkdXJhYmxlOiBkdXJhYmxlXG4gICwgKGVycm9yLCByZXNwb25zZSwgYm9keSkgLT5cbiAgICBvbkNyZWF0ZUV4Y2hhbmdlUmVzcG9uc2UoZXJyb3IsIHJlc3BvbnNlLCBib2R5LCBkZWZlcnJlZClcbiAgKVxuICBkZWZlcnJlZC5wcm9taXNlXG5vbkNyZWF0ZUV4Y2hhbmdlUmVzcG9uc2UgPSAoZXJyb3IsIHJlc3BvbnNlLCBib2R5LCBkZWZlcnJlZCkgLT5cbiAgaWYgbm90IGVyciBhbmQgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAyMDAgb3IgcmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAzMDApXG4gICAgZXJyID0gbmV3IEVycm9yKFwiU3RhdHVzIGNvZGUgcmV0dXJuZWQgI3tyZXNwb25zZS5zdGF0dXNDb2RlfVwiKVxuICBpZiBlcnJcbiAgICBkZWZlcnJlZC5yZWplY3QoZXJyKVxuICAgIHJldHVyblxuICBkZWZlcnJlZC5yZXNvbHZlKClcblxubW9kdWxlLmV4cG9ydHMgPVxuICBjcmVhdGVFeGNoYW5nZTogY3JlYXRlRXhjaGFuZ2UiXX0=