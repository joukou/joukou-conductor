var Q, RabbitMQClient, amqplib, uuid;

amqplib = require('amqplib');

Q = require('q');

uuid = require('node-uuid');

RabbitMQClient = (function() {
  RabbitMQClient.prototype.open = null;

  RabbitMQClient.prototype.connection = null;

  RabbitMQClient.prototype.channel = null;

  RabbitMQClient.prototype.key = null;

  RabbitMQClient.prototype.exchange = null;

  RabbitMQClient.prototype.consumer = null;

  function RabbitMQClient(exchange, key) {
    this.exchange = exchange;
    this.key = key;
    this.open = amqplib.connect(exchange);
  }

  RabbitMQClient.prototype._setupConnection = function() {
    var client;
    client = this;
    return this.open.then(function(con) {
      return client._onConnection.apply(client, [con]);
    });
  };

  RabbitMQClient.prototype._onConnection = function(connection) {
    return this.connection = connection;
  };

  RabbitMQClient.prototype._setupChannel = function() {
    var client, ok;
    client = this;
    ok = this.connection.createChannel();
    ok.then(function(channel) {
      return client._onChannel.apply(client, [channel]);
    });
    return ok;
  };

  RabbitMQClient.prototype._onChannel = function(channel) {
    this.channel = channel;
    return this.channel.assertQueue(this.key);
  };

  RabbitMQClient.prototype.cancel = function(consumerTag) {
    if (!this.channel) {
      return Q.reject(new Error("Not connected"));
    }
    return this.channel.cancel(consumerTag);
  };

  RabbitMQClient.prototype.consume = function(callback, contentOnly, consumerTag) {
    if (!(callback instanceof Function)) {
      throw new TypeError("Callback is expected to be a Function");
    }
    if (!consumerTag) {
      consumerTag = uuid.v4();
    }
    this.open.then(function() {
      return this.channel.consume(this.key, function(message) {
        if (message === null || message === void 0) {
          return;
        }
        if (contentOnly) {
          message = message.content;
        }
        if (message === null || message === void 0) {
          return;
        }
        return callback(message);
      }, {
        consumerTag: consumerTag
      });
    });
    return consumerTag;
  };

  RabbitMQClient.prototype.send = function(message) {
    if (message !== Buffer) {
      message = new Buffer(message);
    }
    return this.open.then(function() {
      return this.channel.sendToQueue(key, message);
    });
  };

  return RabbitMQClient;

})();

module.exports = {
  getClient: function(exchange, key) {
    return new RabbitMQClient(exchange, key);
  },
  RabbitMQClient: RabbitMQClient
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhYml0bXEvY2xpZW50LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLGdDQUFBOztBQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsU0FBUixDQUFWLENBQUE7O0FBQUEsQ0FDQSxHQUFVLE9BQUEsQ0FBUSxHQUFSLENBRFYsQ0FBQTs7QUFBQSxJQUVBLEdBQVUsT0FBQSxDQUFRLFdBQVIsQ0FGVixDQUFBOztBQUFBO0FBS0UsMkJBQUEsSUFBQSxHQUFNLElBQU4sQ0FBQTs7QUFBQSwyQkFDQSxVQUFBLEdBQVksSUFEWixDQUFBOztBQUFBLDJCQUVBLE9BQUEsR0FBUyxJQUZULENBQUE7O0FBQUEsMkJBR0EsR0FBQSxHQUFLLElBSEwsQ0FBQTs7QUFBQSwyQkFJQSxRQUFBLEdBQVUsSUFKVixDQUFBOztBQUFBLDJCQUtBLFFBQUEsR0FBVSxJQUxWLENBQUE7O0FBTWEsRUFBQSx3QkFBQyxRQUFELEVBQVcsR0FBWCxHQUFBO0FBQ1gsSUFBQSxJQUFJLENBQUMsUUFBTCxHQUFnQixRQUFoQixDQUFBO0FBQUEsSUFDQSxJQUFJLENBQUMsR0FBTCxHQUFXLEdBRFgsQ0FBQTtBQUFBLElBRUEsSUFBSSxDQUFDLElBQUwsR0FBWSxPQUFPLENBQUMsT0FBUixDQUFnQixRQUFoQixDQUZaLENBRFc7RUFBQSxDQU5iOztBQUFBLDJCQVVBLGdCQUFBLEdBQWtCLFNBQUEsR0FBQTtBQUNoQixRQUFBLE1BQUE7QUFBQSxJQUFBLE1BQUEsR0FBUyxJQUFULENBQUE7V0FDQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQVYsQ0FBZSxTQUFDLEdBQUQsR0FBQTthQUNiLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBckIsQ0FBMkIsTUFBM0IsRUFBbUMsQ0FBQyxHQUFELENBQW5DLEVBRGE7SUFBQSxDQUFmLEVBRmdCO0VBQUEsQ0FWbEIsQ0FBQTs7QUFBQSwyQkFlQSxhQUFBLEdBQWUsU0FBQyxVQUFELEdBQUE7V0FDYixJQUFJLENBQUMsVUFBTCxHQUFrQixX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QixjQUZoQjtDQWhFRixDQUFBIiwiZmlsZSI6InJhYml0bXEvY2xpZW50LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYW1xcGxpYiA9IHJlcXVpcmUoJ2FtcXBsaWInKVxuUSAgICAgICA9IHJlcXVpcmUoJ3EnKVxudXVpZCAgICA9IHJlcXVpcmUoJ25vZGUtdXVpZCcpXG5cbmNsYXNzIFJhYmJpdE1RQ2xpZW50XG4gIG9wZW46IG51bGxcbiAgY29ubmVjdGlvbjogbnVsbFxuICBjaGFubmVsOiBudWxsXG4gIGtleTogbnVsbFxuICBleGNoYW5nZTogbnVsbFxuICBjb25zdW1lcjogbnVsbFxuICBjb25zdHJ1Y3RvcjogKGV4Y2hhbmdlLCBrZXkpIC0+XG4gICAgdGhpcy5leGNoYW5nZSA9IGV4Y2hhbmdlXG4gICAgdGhpcy5rZXkgPSBrZXlcbiAgICB0aGlzLm9wZW4gPSBhbXFwbGliLmNvbm5lY3QoZXhjaGFuZ2UpXG4gIF9zZXR1cENvbm5lY3Rpb246IC0+XG4gICAgY2xpZW50ID0gdGhpc1xuICAgIHRoaXMub3Blbi50aGVuKChjb24pIC0+XG4gICAgICBjbGllbnQuX29uQ29ubmVjdGlvbi5hcHBseShjbGllbnQsIFtjb25dKVxuICAgIClcbiAgX29uQ29ubmVjdGlvbjogKGNvbm5lY3Rpb24pIC0+XG4gICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvblxuICBfc2V0dXBDaGFubmVsOiAtPlxuICAgIGNsaWVudCA9IHRoaXNcbiAgICBvayA9IHRoaXMuY29ubmVjdGlvbi5jcmVhdGVDaGFubmVsKClcbiAgICBvay50aGVuKChjaGFubmVsKSAtPlxuICAgICAgY2xpZW50Ll9vbkNoYW5uZWwuYXBwbHkoY2xpZW50LCBbY2hhbm5lbF0pXG4gICAgKVxuICAgIG9rXG4gIF9vbkNoYW5uZWw6IChjaGFubmVsKSAtPlxuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmNoYW5uZWwuYXNzZXJ0UXVldWUodGhpcy5rZXkpXG4gIGNhbmNlbDogKGNvbnN1bWVyVGFnKSAtPlxuICAgICMgTm90IGNvbm5lY3RlZFxuICAgIGlmIG5vdCB0aGlzLmNoYW5uZWxcbiAgICAgIHJldHVybiBRLnJlamVjdChuZXcgRXJyb3IoXCJOb3QgY29ubmVjdGVkXCIpKVxuICAgIHRoaXMuY2hhbm5lbC5jYW5jZWwoY29uc3VtZXJUYWcpXG4gIGNvbnN1bWU6IChjYWxsYmFjaywgY29udGVudE9ubHksIGNvbnN1bWVyVGFnKSAtPlxuICAgIGlmIGNhbGxiYWNrIG5vdCBpbnN0YW5jZW9mIEZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG8gYmUgYSBGdW5jdGlvblwiKVxuICAgIGlmIG5vdCBjb25zdW1lclRhZ1xuICAgICAgIyBDcmVhdGUgb25lIHNvIHRoZXkgY2FuIGNhbmNlbCBpdFxuICAgICAgY29uc3VtZXJUYWcgPSB1dWlkLnY0KClcbiAgICB0aGlzLm9wZW4udGhlbigtPlxuICAgICAgdGhpcy5jaGFubmVsLmNvbnN1bWUodGhpcy5rZXksIChtZXNzYWdlKSAtPlxuICAgICAgICAjIEZpbHRlciB0aGUgZHVkcyBoZXJlXG4gICAgICAgIGlmIG1lc3NhZ2UgaXMgbnVsbCBvciBtZXNzYWdlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIHJldHVyblxuICAgICAgICBpZiBjb250ZW50T25seVxuICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLmNvbnRlbnRcbiAgICAgICAgIyBDaGVjayBhZ2FpblxuICAgICAgICBpZiBtZXNzYWdlIGlzIG51bGwgb3IgbWVzc2FnZSBpcyB1bmRlZmluZWRcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgY2FsbGJhY2sobWVzc2FnZSlcbiAgICAgICwgY29uc3VtZXJUYWc6IGNvbnN1bWVyVGFnKVxuICAgIClcbiAgICBjb25zdW1lclRhZ1xuICBzZW5kOiAobWVzc2FnZSkgLT5cbiAgICBpZiBtZXNzYWdlIGlzbnQgQnVmZmVyXG4gICAgICBtZXNzYWdlID0gbmV3IEJ1ZmZlcihtZXNzYWdlKVxuICAgIHRoaXMub3Blbi50aGVuKC0+XG4gICAgICB0aGlzLmNoYW5uZWwuc2VuZFRvUXVldWUoa2V5LCBtZXNzYWdlKVxuICAgIClcbm1vZHVsZS5leHBvcnRzID1cbiAgZ2V0Q2xpZW50OiAoZXhjaGFuZ2UsIGtleSkgLT5cbiAgICByZXR1cm4gbmV3IFJhYmJpdE1RQ2xpZW50KGV4Y2hhbmdlLCBrZXkpXG4gIFJhYmJpdE1RQ2xpZW50OiBSYWJiaXRNUUNsaWVudCJdfQ==